<?php
/**
 * @file
 */

function od_entity_title_translate_entity_load($entities, $type) {
  foreach ($entities as $entity) {
    $context = array(
      'entity' => $entity,
    );
    //od_file_convert_entity($entity, $type);
    od_entity_label_translate_factory::inst()
      ->getTranslator($type, $context)
      ->triggerEvent('entity_load');
  }
}

function od_entity_title_translate_entity_view_alter(&$build, $type) {
  $context = array(
    'build' => &$build,
  );

  od_entity_label_translate_factory::inst()
    ->getTranslator($type, $context)
    ->triggerEvent('entity_view');
}

/**
 * @param $entity
 * @param $type
 * @todo needs hook_implements_alter()
 */
function od_entity_title_translate_entity_update($entity, $type) {
  od_entity_label_translate_factory::inst()
    ->getTranslator($type, $entity)
    ->restoreLabel($entity);
}

//
//function od_file_convert_entity($entity, $type) {
//  if (!($type == 'node' && isset($entity->type) && $entity->type == 'resource')) {
//    return;
//  }
//
//  $wrapper = entity_metadata_wrapper($type, $entity);
//  if ($items = $wrapper->field_upload->value()) {
//    $items = is_array($items) ? $items : array($items);
//
//    foreach ($items as $delta => &$item) {
//      if (file_exists($item->uri)) {
//        $new_name = basename(tempnam('', 'od'));
//        $new_name = 'public://'. $new_name;
//        $converted = file_get_contents($item->uri);
//        $encoding = mb_detect_encoding($converted);
//        $converted = iconv($encoding ? $encoding : 'CP1251', 'UTF-8//TRANSLIT', $converted);
//        file_put_contents($new_name, $converted);
//
//        $item->uri = $new_name;
//
//        $item = (array) $item;
//      }
//
//      $entity->field_upload[LANGUAGE_NONE] = $items;
//    }
//  }
//}

function od_entity_title_translate_get_current_language($entity, $type) {
  return $GLOBALS['language'];
}

/**
 * Class od_entity_label_translate_factory
 */
class od_entity_label_translate_factory {
  const DEFAULT_CLASS = 'od_entity_label_translate_default_class';
  const CLASS_PREFIX = 'od_entity_label_translate_class_';

  protected static $instance = NULL;
  protected $instances = array();

  protected function __construct() {}

  /**
   * @return od_entity_label_translate_factory
   */
  public static function inst() {
    if (static::$instance === NULL) {
      $current_class = get_class();
      static::$instance = new $current_class();
    }

    return static::$instance;
  }

  protected function getTranslatorClassName($type, $context = NULL) {
    return static::CLASS_PREFIX. "{$type}";
  }

  /**
   * @param $type
   * @param $context
   * @return od_entity_label_translate_class_interface
   */
  public function getTranslator($type, $context) {
    $classname = $this->getTranslatorClassName($type, $context);

    if (!isset($this->instances[$classname])) {
      $creation_class = $classname; //Just a variable for preserving original $classname
      //Check if no such class then create default class
      if (!class_exists($classname)) {
        $creation_class = static::DEFAULT_CLASS;
      }

      $this->instances[$classname] = new $creation_class($type, $context);
      $this->instances[$classname]->setLangCode(od_entity_title_translate_get_current_language($context, $type)->language);
    }
    else {
      $this->instances[$classname]->setContext($context);
    }

    return $this->instances[$classname];
  }
}


interface od_entity_label_translate_class_interface {
  /**
   * Restores original label of an entity to prevent braking it while it's saving
   * @param $entity
   * @return od_entity_label_translate_class_interface
   * @todo Must save all labels somewhere else
   */
  function restoreLabel();

  /**
   * Get current entity translation langcode
   * @param $langcode
   * @return string
   *  A langcode for translation
   */
  function getLangCode();

  /**
   * Sets langcode for this entity to translate to
   * @return od_entity_label_translate_class_interface
   */
  function setLangCode($landcode);

  /**
   * Gets label property value
   * @param $entity
   * @return string
   *  A label of an entity
   */
  function getLabel();

  /**
   * Sets new label of an entity
   * @param $entity
   * @param $label
   * @return od_entity_label_translate_class_interface
   */
  function setLabel($label);

  /**
   * Translates label
   * @param $entity
   *  An entity to translate its label
   * @return string
   *  Translated label
   */
  function getTranslatedLabel();

  /**
   * Creates backup copy of original entity label
   * @param $entity
   * @return od_entity_label_translate_class_interface
   */
  function backupLabel();

  /**
   * @return boolean
   *  TRUE if need to translate and FALSE otherwise
   */
  function needsTranslation();

  /**
   * Triggers some event defied by $event parameter and all the handlers.
   * @param $event
   * @param $context
   * @return od_entity_label_translate_class_interface
   */
  function triggerEvent($event);

  /**
   * Sets new context for this translator
   * @param $context
   * @return mixed
   */
  function setContext(&$context);

  /**
   * Main class constructor. Shouldn't be used in child classes. Use @see ->init() instead
   * @param $entity_type
   */
  function __construct($entity_type, &$context);
}
/**
 * Class od_entity_label_translate_class
 * @todo interface
 */
abstract class od_entity_label_translate_abstract implements od_entity_label_translate_class_interface {
  protected $entity_type = NULL;
  protected $langcode = NULL;

  /*
   * Current context storage
   */
  protected $context = NULL;

  /*
   * Contains current event or NULL.
   */
  protected $event = NULL;

  protected function setEvent($event) {
    $this->event = $event;
  }

  public function __construct($entity_type, &$context) {
    $this->entity_type = $entity_type;
    $this->setContext($context);
    $this->init();
  }

  /**
   * Constructor
   */
  protected function init() {}

  function setContext(&$context) {
    $this->context = &$context;
  }

  function setLangCode($langcode) {
    $this->langCode = $langcode;

    return $this;
  }

  function getLangCode() {
    return $this->langcode;
  }

  function triggerEvent($event) {
    $method = "on_{$event}";
    if (method_exists($this, $method)) {
      $this->setEvent($event);
      call_user_func(array($this, $method));
    }

    return $this;
  }

  function getLabel() {}
  function restoreLabel() {}
  function backupLabel() {}
  function setLabel($label) {}
  function getTranslatedLabel() {}
  function needsTranslation() {
    return TRUE;
  }
}

class od_entity_label_translate_default_class extends od_entity_label_translate_abstract {
}