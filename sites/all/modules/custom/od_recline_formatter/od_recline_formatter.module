<?php

/**
 * Implements hook_field_formatter_info().
 */
function od_recline_formatter_field_formatter_info() {
  $formatters = array(
    'recline_link_formatter' => array(
      'label' => t('Recline link'),
      'field types' => array('recline_field', 'file'),
      'description' => t('Displays file as a link.'),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function od_recline_formatter_field_formatter_info_alter(&$items) {
  if (!in_array('recline_field', $items['file_url_plain']['field types'])) {
    $items['file_url_plain']['field types'][] = 'recline_field';
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function od_recline_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'recline_link_formatter':
      list($entity_id, $revision_id, ) = entity_extract_ids($entity_type, $entity);
      if ($dataset_wrapper = od_dataset_get_wrapper_by_resource($entity_id, $revision_id)) {
        $dataset_revision_id = $dataset_wrapper->{$dataset_wrapper->entityKey('revision')}->value();
        $bundle = $dataset_wrapper->getBundle();
        $context = od_pubdlcnt_api_attacher_context_add($dataset_wrapper->type(), $dataset_wrapper->getIdentifier(), $dataset_revision_id, "{$bundle}:{$field['field_name']}", array(
          'selector' => '.download[data-stat-id="%STAT_ID%"] a',
        ));
      }

      foreach ($items as $delta => $item) {
        $item['od_pubdlcnt_context'] = isset($context) ? $context : NULL; // Inject context
        $element[$delta] = array(
          '#theme' => 'recline_link_formatter',
          '#item' => $item,
        );
      }
      break;
   }
  return $element;
}

/**
 * Implements hook_theme().
 */
function od_recline_formatter_theme() {
  return array(
    'recline_link_formatter' => array(
      'variables' => array('item' => NULL),
    ),
  );
}

/**
 * Returns HTML for an recline field formatter.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: Associative array of recline field
 *
 * @ingroup themeable
 */
function theme_recline_link_formatter($variables) {
  $file = $variables['item'];

  $url = file_create_url($file['uri']);

  $icon = '';

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options = array(
    'attributes' => array(
      'type' => $file['filemime'] . '; length=' . $file['filesize'],
    ),
  );

  // Use the description as the link text if available.
  if (empty($file['description'])) {
    $link_text = $file['filename'];
  }
  else {
    $link_text = $file->description;
    $options['attributes']['title'] = check_plain($file['filename']);
  }

  // Get pubdlcnt context while it's available
  $context = $file['od_pubdlcnt_context'];
  if (!isset($context)) {
    $context = array('stat_id' => -1);
  }

  $options['attributes']['dlcnt:data-stat-id'] = $context['stat_id'];
  $file = l(t('Download'), $url, $options);

  return '<div class="download">' . $file . '</div><span class="data-explorer"></span>';
}
