<?php

/**
 * Define module root directory.
 */
define('OD_LOG', dirname(__FILE__));

/**
 * Include files.
 */
require_once OD_LOG . '/includes/constants.inc';
require_once OD_LOG . '/includes/controller.inc';

/**
 * Implements hook_node_insert().
 */
function od_log_node_insert($node) {
  if (isset($node->od_log) && $node->od_log === FALSE) {
    return;
  }

  $user_id = isset($node->od_log['user']) ? $node->od_log['user'] : NULL;

  switch ($node->type) {
    case 'dataset':
      $organization_id = !empty($node->{OD_COMMON_FIELD_DATASET_OWNER}) ? $node->{OD_COMMON_FIELD_DATASET_OWNER}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $message = 'Набор открытых данных создан';
      od_log($message, OD_LOG_IMPORTANCE_STATUS, OD_LOG_EVENT_DATASET_ADDED, $organization_id, $node->nid, $user_id);
      break;
    case 'resource':
      $dataset_id = !empty($node->{OD_COMMON_FIELD_RESOURCE_DATASET}) ? $node->{OD_COMMON_FIELD_RESOURCE_DATASET}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $dataset = node_load($dataset_id);

      $organization_id = (!empty($dataset) && !empty($dataset->{OD_COMMON_FIELD_DATASET_OWNER})) ? $dataset->{OD_COMMON_FIELD_DATASET_OWNER}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $message = 'Ресурс набора открытых данных создан';
      od_log($message, OD_LOG_IMPORTANCE_STATUS, OD_LOG_EVENT_RESOURCE_ADDED, $organization_id, $dataset_id, $user_id);
      break;
  }
}

/**
 * Implements hook_node_update().
 */
function od_log_node_update($node) {
//  if (isset($node->od_log) && $node->od_log === FALSE) {
//    return;
//  }
  $cache = &drupal_static(__FUNCTION__, array());
  $cache_key = implode('', entity_extract_ids('node', $node));
  if (isset($cache[$cache_key])) {
   return;
  }

  $cache[$cache_key] = TRUE;
  $user_id = isset($node->od_log['user']) ? $node->od_log['user'] : NULL;

  switch ($node->type) {
    case 'dataset':
      $organization_id = !empty($node->{OD_COMMON_FIELD_DATASET_OWNER}) ? $node->{OD_COMMON_FIELD_DATASET_OWNER}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $message = 'Набор открытых данных изменен';

      od_log($message, OD_LOG_IMPORTANCE_STATUS, OD_LOG_EVENT_DATASET_CHANGED, $organization_id, $node->nid, $user_id);
      break;
    case 'resource':
      $dataset_id = !empty($node->{OD_COMMON_FIELD_RESOURCE_DATASET}) ? $node->{OD_COMMON_FIELD_RESOURCE_DATASET}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $dataset = node_load($dataset_id);

      $organization_id = (!empty($dataset) && !empty($dataset->{OD_COMMON_FIELD_DATASET_OWNER})) ? $dataset->{OD_COMMON_FIELD_DATASET_OWNER}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $message = 'Ресурс набора открытых данных изменен';
      od_log($message, OD_LOG_IMPORTANCE_STATUS, OD_LOG_EVENT_RESOURCE_CHANGED, $organization_id, $dataset_id, $user_id);
      break;
  }
}

/**
 * Implements hook_node_delete().
 */
function od_log_node_delete($node) {
  if (isset($node->od_log) && $node->od_log === FALSE) {
    return;
  }

  $user_id = isset($node->od_log['user']) ? $node->od_log['user'] : NULL;

  switch ($node->type) {
    case 'resource':
      $dataset_id = !empty($node->{OD_COMMON_FIELD_RESOURCE_DATASET}) ? $node->{OD_COMMON_FIELD_RESOURCE_DATASET}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $dataset = node_load($dataset_id);

      $organization_id = (!empty($dataset) && !empty($dataset->{OD_COMMON_FIELD_DATASET_OWNER})) ? $dataset->{OD_COMMON_FIELD_DATASET_OWNER}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $message = 'Ресурс набора открытых данных удален';
      od_log($message, OD_LOG_IMPORTANCE_STATUS, OD_LOG_EVENT_RESOURCE_DELETED, $organization_id, $dataset_id, $user_id);
      break;
  }
}

/**
 * Implements hook_views_api().
 */
function od_log_views_api() {
  // Define views api version.
  $views_api = array(
    'api' => 3,
  );

  return $views_api;
}

/**
 * Implements hook_views_default_views().
 */
function od_log_views_default_views() {
  // Init output variable.
  $items = array();

  $path = OD_LOG . '/includes/views/custom_views';

  foreach (array_keys(file_scan_directory($path, '/\.inc$/')) as $file_path) {
    require $file_path;

    if (isset($view)) {
      $items[$view->name] = $view;
    }
  }

  return $items;
}

/**
 * Implements hook_action_info().
 */
function od_log_action_info() {
  // Init output variable.
  $items = array();

  $items['od_log_notify_organization'] = array(
    'type' => 'log',
    'label' => 'Уведомление куратора об ошибке импорта открытых данных с сайта орагнизации',
    'configurable' => FALSE,
    'aggregate' => TRUE,
    'triggers' => array('any'),
  );

  return $items;
}

/**
 * Action callback. Import opendata from organizations.
 */
function od_log_notify_organization($entities) {
  $messages = array();
  foreach ($entities as $entity) {
    // Curator notified.
    $entity->{OD_COMMON_FIELD_LOG_CURATOR_WAS_NOTIFIED}[LANGUAGE_NONE]['0']['value'] = 1;
    log_save($entity);

    // Check
    if (empty($entity->{OD_COMMON_FIELD_LOG_ORGANIZATION})) {
      continue;
    }

    $organization_id = $entity->{OD_COMMON_FIELD_LOG_ORGANIZATION}[LANGUAGE_NONE]['0']['target_id'];
    $organization = node_load($organization_id);

    if (empty($organization->{OD_COMMON_FIELD_ORGANIZATION_CURATOR})) {
      continue;
    }

    if (!isset($messages[$organization_id])) {
      $messages[$organization_id] = array();
    }

    $dataset_id = !empty($entity->{OD_COMMON_FIELD_LOG_DATASET}) ? $entity->{OD_COMMON_FIELD_LOG_DATASET}[LANGUAGE_NONE]['0']['target_id'] : 0;

    if (!isset($messages[$organization_id][$dataset_id])) {
      $messages[$organization_id][$dataset_id] = array();
    }

    if (!in_array($entity->message, $messages[$organization_id][$dataset_id])) {
      $messages[$organization_id][$dataset_id][] = $entity->message;
    }
  }

  foreach ($messages as $organization_id => $organization_messages) {
    $organization = node_load($organization_id);

    $email_message = '';
    $email_message .= 'Уважаемый сотрудник раздела открытых данных официального сайта!' . "\n\n";
    if (!empty($organization_messages[0])) {
      $email_message .= 'При импорте открытых данных с официального сайта были обнаружены следующие ошибки в разделе открытых данных:' . "\n";
      foreach ($organization_messages[0] as $message) {
        $email_message .= '— ' . $message . "\n";
      }
      $email_message .= 'Пожалуйста, воспользуйтесь инструментом публикации открытых данных Портала или приведите свои разделы в соответствие с Методическими рекомендациями.' . "\n\n";
    }
    unset($organization_messages[0]);

    if (!empty($organization_messages)) {
      $email_message .= 'С вашего сайта были загружены открытые данные на Портал, в ходе загрузки были обнаружены ошибки у следующих наборов:' . "\n";
      foreach ($organization_messages as $dataset_id => $dataset_messages) {
        $dataset = node_load($dataset_id);
        $email_message .= '— ' . $dataset->title . "\n";
        foreach ($dataset_messages as $dataset_message) {
          $email_message .= '  — ' . $dataset_message . "\n";
        }
      }
      $email_message .= 'Заполните поля в разделе открытых данных на своем сайте или отредактируйте паспорта вручную на Портале открытых данных.' . "\n\n";
    }

    $email_message .= 'С уважением.' . "\n";
    $email_message .= 'Портал открытых данных.' . "\n";

    foreach ($organization->{OD_COMMON_FIELD_ORGANIZATION_CURATOR}[LANGUAGE_NONE] as $field_item) {
      $user_id = $field_item['target_id'];
      $user = user_load($user_id);

      $mail_vars = array();
      $mail_vars['message'] = $email_message;
      drupal_mail('od_log', 'notice', $user->mail, 'ru', $mail_vars);
    }
  }
}

/**
 * Implements hook_mail().
 */
function od_log_mail($key, &$message, $vars) {
  switch($key) {
    case 'notice':
      $message['subject'] = 'Уведомление куратора об ошибках открытых данных на сайте орагнизации';
      $message['body'][] = $vars['message'];
      break;
  }
}
