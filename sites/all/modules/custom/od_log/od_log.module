<?php

/**
 * Define module root directory.
 */
define('OD_LOG', dirname(__FILE__));

/**
 * Load constants.
 */
require_once OD_LOG . '/includes/constants.inc';

/**
 * Include API files.
 */
require_once OD_LOG . '/includes/controller.inc';

/**
 * Implements hook_node_save
 */
function od_log_node_insert($node) {
  if (isset($node->od_log) && $node->od_log === FALSE) {
    return;
  }

  $user_id = isset($node->od_log['user']) ? $node->od_log['user'] : NULL;

  switch ($node->type) {
    case 'dataset':
      $organization_id = !empty($node->{OD_COMMON_FIELD_DATASET_OWNER}) ? $node->{OD_COMMON_FIELD_DATASET_OWNER}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $message = 'Набор открытых данных создан';
      od_log($message, OD_LOG_IMPORTANCE_STATUS, OD_LOG_EVENT_DATASET_ADDED, $organization_id, $node->nid, $user_id);
      break;
    case 'resource':
      $dataset_id = !empty($node->{OD_COMMON_FIELD_RESOURCE_DATASET}) ? $node->{OD_COMMON_FIELD_RESOURCE_DATASET}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $dataset = node_load($dataset_id);

      $organization_id = (!empty($dataset) && !empty($dataset->{OD_COMMON_FIELD_DATASET_OWNER})) ? $dataset->{OD_COMMON_FIELD_DATASET_OWNER}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $message = 'Ресурс набора открытых данных создан';
      od_log($message, OD_LOG_IMPORTANCE_STATUS, OD_LOG_EVENT_RESOURCE_ADDED, $organization_id, $dataset_id, $user_id);
      break;
  }
}

function od_log_node_update($node) {
  if (isset($node->od_log) && $node->od_log === FALSE) {
    return;
  }

  $user_id = isset($node->od_log['user']) ? $node->od_log['user'] : NULL;

  switch ($node->type) {
    case 'dataset':
      $organization_id = !empty($node->{OD_COMMON_FIELD_DATASET_OWNER}) ? $node->{OD_COMMON_FIELD_DATASET_OWNER}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $message = 'Набор открытых данных обновлен';

      od_log($message, OD_LOG_IMPORTANCE_STATUS, OD_LOG_EVENT_DATASET_CHANGED, $organization_id, $node->nid, $user_id);
      break;
    case 'resource':
      $dataset_id = !empty($node->{OD_COMMON_FIELD_RESOURCE_DATASET}) ? $node->{OD_COMMON_FIELD_RESOURCE_DATASET}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $dataset = node_load($dataset_id);

      $organization_id = (!empty($dataset) && !empty($dataset->{OD_COMMON_FIELD_DATASET_OWNER})) ? $dataset->{OD_COMMON_FIELD_DATASET_OWNER}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $message = 'Ресурс набора открытых данных обновлен';
      od_log($message, OD_LOG_IMPORTANCE_STATUS, OD_LOG_EVENT_RESOURCE_CHANGED, $organization_id, $dataset_id, $user_id);
      break;
  }
}

function od_log_node_delete($node) {
  if (isset($node->od_log) && $node->od_log === FALSE) {
    return;
  }

  $user_id = isset($node->od_log['user']) ? $node->od_log['user'] : NULL;

  switch ($node->type) {
    case 'resource':
      $dataset_id = !empty($node->{OD_COMMON_FIELD_RESOURCE_DATASET}) ? $node->{OD_COMMON_FIELD_RESOURCE_DATASET}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $dataset = node_load($dataset_id);

      $organization_id = (!empty($dataset) && !empty($dataset->{OD_COMMON_FIELD_DATASET_OWNER})) ? $dataset->{OD_COMMON_FIELD_DATASET_OWNER}[LANGUAGE_NONE][0]['target_id'] : NULL;

      $message = 'Ресурс набора открытых данных удален';
      od_log($message, OD_LOG_IMPORTANCE_STATUS, OD_LOG_EVENT_RESOURCE_DELETED, $organization_id, $dataset_id, $user_id);
      break;
  }
}

/**
 * Implements hook_views_api().
 */
function od_log_views_api() {
  // Define views api version.
  $views_api = array(
    'api' => 3,
    'path' => OD_LOG . '/includes/views',
  );

  return $views_api;
}

/**
 * Implements hook_views_default_views().
 */
function od_log_views_default_views() {
  // Init output variable.
  $items = array();

  $path = OD_LOG . '/includes/views/custom_views';

  foreach (array_keys(file_scan_directory($path, '/\.inc$/')) as $file_path) {
    require $file_path;

    if (isset($view)) {
      $items[$view->name] = $view;
    }
  }

  return $items;
}
