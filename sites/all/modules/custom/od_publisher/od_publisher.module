<?php
/**
 * @file
 */

function od_publisher_permission() {
  $perms = array();

  $perms['od_publisher_map_publisher'] = array(
    'title' => t('Map the selected role as a publisher role'),
  );

  return $perms;
}

/**
 * Implements hook_node_access()
 */
function od_publisher_node_access($node, $op, $account) {
  //Check if passed user is not superadmin (uid=1) or user is not a publisher
  if (user_access('administer', $account) || !user_access('od_publisher_map_publisher', $account)) {
    return NODE_ACCESS_IGNORE; //Do not do anything
  }

  if (!is_object($node) && $node == 'dataset') {
    return NODE_ACCESS_ALLOW;
  }

  if (is_object($node) && $node->type == 'dataset') {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $user_wrapper = entity_metadata_wrapper('user', $account);

    // Get the organization if exists.
    if ($organization = $node_wrapper->field_organization->value()) {
      // Determine if the user is publisher of this organization.
      $is_publisher = od_publisher_api_user_is_curator_of($organization, $account);

      // Publisher has full access.
      if ($is_publisher) {
        return NODE_ACCESS_ALLOW;
      }
      // Otherwise deny only if want to edit.
      elseif ($op != 'view') {
        return NODE_ACCESS_DENY;
      }
    }
  }

  // Go through other access rules.
  return NODE_ACCESS_IGNORE;
}

/**
 * Checks if user has organization passed by $nid
 * @param $nid
 *  nid of an organization to check
 * @param null $account
 * @return bool
 *
 * @todo: $nid should be $nids (array of nids)
 * @todo: support multi field values
 */
function od_publisher_api_user_is_curator_of($node_or_nid, $account = NULL) {
  $account = $account === NULL ? $GLOBALS['user'] : $account;
  $node_wrapper = entity_metadata_wrapper('node', $node_or_nid);

  if (($curators = $node_wrapper->field_organization_curators->value())) {
    foreach ($curators as $curator) {
      if ($curator->uid == $account->uid) {
        return TRUE; //The user is publisher of this organization
      }
    }
  }

  return FALSE;
}
