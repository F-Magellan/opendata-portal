<?php

/**
 * Define module root directory.
 */
define('OD_COMMON', dirname(__FILE__));

/**
 * Load ajax commands.
 */
require_once OD_COMMON . '/od_common.ajax_commands.inc';

/**
 * Load constants.
 */
require_once OD_COMMON . '/includes/constants.inc';

/**
 * Implements hook_module_implements_alter()
 */
function od_common_module_implements_alter(&$implementations, $hook) {
  //Убиваем имплементацию hook_node_view() модуля dkan_datastore
  if ($hook == 'node_view' && isset($implementations['dkan_datastore'])) {
    unset($implementations['dkan_datastore']);
  }
  elseif ($hook == 'i18n_object_info' && isset($implementations['i18n_taxonomy'])) {
    unset($implementations['i18n_taxonomy']);
  }
  elseif ($hook == 'form_alter' && isset($implementations['privatemsg'])) {
    $saved_alter = $implementations['od_common'];
    unset($implementations['od_common']);
    $implementations['od_common'] = $saved_alter;
  }
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * where all our own plugins are.
 */
function od_common_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_permission()
 */
function od_common_permission() {
  $perms = array();

  $perms['od_common localize access taxonomy_term'] = array(
    'title' => t('Localize taxonomy terms'),
  );

  return $perms;
}


/**
 * Implements hook_library()
 */
function od_common_library() {
  $libraries = array();

  $path = drupal_get_path('module', 'od_common');
  $libraries['jquery.tiptip'] = array(
    'title' => 'jQuery TipTip',
    'website' => 'http://code.drewwilson.com/entry/tiptip-jquery-plugin',
    'version' => '1.3',
    'js' => array(
      "{$path}/libraries/jquery/tiptip/jquery.tipTip.js"  => array(),
    ),
    'css' => array(
      "{$path}/libraries/jquery/tiptip/tipTip.css"  => array(),
    ),
  );

  $libraries['jquery.tooltip'] = array(
    'title' => 'jQuery Tooltip',
    //'website' => 'http://code.drewwilson.com/entry/tiptip-jquery-plugin',
    //'version' => '1.3',
    'js' => array(
      "{$path}/libraries/jquery/jquery-tooltip/jquery.tooltip.min.js"  => array(),
    ),
    'css' => array(
      "{$path}/libraries/jquery/jquery-tooltip/jquery.tooltip.css"  => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_entity_property_info_alter()
 */
function od_common_entity_property_info_alter(&$info) {
  $info['node']['properties']['clone_title'] = array(
    'label' => t('Title clone'),
    'type' => 'text',
    'description' => t('Title clone field. Gets title property'),
    'getter callback' => 'od_common_entity_property_verbatim_get',
    'real property' => 'title',
    'computed' => TRUE,
  );
}

function od_common_entity_property_verbatim_get($data, array $options, $name, $type, $info) {
  $name = isset($info['real property']) ? $info['real property'] : $name;
  return entity_property_verbatim_get($data, $options, $name, $type, $info);
}

/**
 * Implements hook_form_alter()
 */
function od_common_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'views_exposed_form':
      od_common_module('map_views_alter');
      _od_common_map_views_form_views_exposed_form_alter($form, $form_state);
      break;
    case 'user_register_form':
      od_common_module('od_user_register_alter');
      _od_common_form_user_register_form_alter($form, $form_state);
      break;
    case 'user_login':
      od_common_module('od_user_login_alter');
      _od_common_form_user_login_alter($form, $form_state);
      break;
    case 'user_pass':
      od_common_module('od_user_reset_pass_alter');
      _od_common_form_user_pass_alter($form, $form_state);
      break;
    case 'user_profile_form':
      od_common_module('od_user_profile_form_alter');
      _od_common_form_user_profile_form_alter($form, $form_state);
      break;
    case 'piwik_reports_dateselect_form': 
      od_common_module('od_piwik_reports_dateselect_form_alter');
      _od_common_form_piwik_reports_dateselect_form_alter($form, $form_state);
      break;
    case 'user_pass_reset':
      od_common_module('od_user_pass_reset_form_alter');
      _od_common_for_user_pass_reset_form_alter($form, $form_state);
      break;
    case 'idea_node_form':
      od_common_module('od_idea_node_form_alter');
      _od_common_idea_node_form_alter($form, $form_state);
      break;
  }
  //Translate submit button
  if (isset($form['#entity_type']) && $form['#entity_type'] == 'entityform') {
    $form['actions']['submit']['#value'] = t($form['actions']['submit']['#value']);
  }
  //Hide 'Your name' form element for comment form
  if (isset($form['#entity_type']) && $form['#entity_type'] == 'comment') {
    unset($form['author']['_author']);
  }
}

/**
 * Implements hook_preprocess_form_element()
 */
function od_common_preprocess_form_element(&$variables) {
  if (isset($variables['element']['#field_name']) && $variables['element']['#field_name'] == 'field_license') {
    od_common_module('od_preprocess_wizard_entityform_edit_alter');
    _od_common_form_od_preprocess_wizard_entityform_edit_preprocess_form_element($variables);
  }
}

/**
 * Implements hook_popup_description_exclusions()
 */
function od_common_popup_description_exclusions() {
  return array(
    'edit-field-license-und',
  );
}
/**
 * Implements hook_preprocess_THEMEHOOK()
 */
function od_common_preprocess_date_combo(&$vars) {
  $paths = array(
    'dataset-actions/add-new-dataset',
    'eform/submit/od-preprocess-wizard',
  );

  if (drupal_match_path($_GET['q'], implode("\n", $paths))) {
    $vars['theme_hook_suggestion'] = 'od_common_date_combo';

    //Include our module that contains necessary theme function
    od_common_module('od_combo_theme_replacement');
  }
}

/**
 * Preprocess function whose runs before template_preprocess_views_exposed_form.
 *
 *  In order to fix translations of exposed form's buttons.
 */
function _od_common_template_preprocess_views_exposed_form(&$vars) {
  // Translate all submit button's text
  // @fixme: It's just a warkaround
  if (isset($vars['form']['submit']['#type']) && $vars['form']['submit']['#type'] == 'submit') {
    $vars['form']['submit']['#value'] = t($vars['form']['submit']['#value']);
  }
}

/**
 * Implements hook_preprcess_THEMEHOOK()
 *
 * Adds id and class .ctools-collapsible-remember to ctools elements if they don't have them.
 */
function od_common_preprocess_panels_style_collapsible(&$vars) {
  if (!isset($vars['pane'])) {
    $hash = substr(md5(substr($vars['content'], 0, 80)), 0, 8);
    $vars['pane'] = (object) array(
      'css' => array(
        'css_id' => "auto-generated-id-$hash",
        'css_class' => 'ctools-collapsible-remember',
      ),
    );
  }
}

/**
 * Implements hook_theme()
 */
function od_common_theme() {
  $themes = array();

  $themes['od_common_date_combo'] = array(
    //'file' => 'date.theme',
    //'path' => drupal_get_path('module', 'od_common'),
    'render element' => 'element',
  );

  $themes['od_common_recline_link_formatter'] = array(
    'variables' => array('item' => NULL, 'options' => array(), 'title' => NULL),
  );

  return $themes;
}

function od_common_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['views_exposed_form'])) {
    if (!isset($theme_registry['views_exposed_form']['preprocess functions'])) {
      $theme_registry['views_exposed_form']['preprocess functions'] = array();
    }

    array_unshift($theme_registry['views_exposed_form']['preprocess functions'], '_od_common_template_preprocess_views_exposed_form');
  }
}

/**
 * Implements hook_menu_alter().
 * Изменяем название вкладки Edit и View для Набора данных.
 */
function od_common_menu_alter(&$items) {
  unset($items['node/%node/view']['title']);
  $items['node/%node/view']['title callback'] = 'od_common_view_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
  
  unset($items['node/%node/edit']['title']);
  $items['node/%node/edit']['title callback'] = 'od_common_edit_tab_title';
  $items['node/%node/edit']['title arguments'] = array(1);
  
  //removes tab 'Download', 'Track', 'Activity' and 'Resource'
  unset($items['node/%node/download']);
  unset($items['node/%node/track']);
  unset($items['node/%node/activity']);
  unset($items['node/%node/resource']);
  unset($items['node/%node/api']);
}

function od_common_view_tab_title($node) {
  if ($node->type == 'dataset') {
    return t('Passport');
  }
  return t('View');
}

function od_common_edit_tab_title($node) {
  if ($node->type == 'dataset') {
    return t('Edit passport');
  }
  return t('Edit');
}

function od_common_preprocess_menu_link(&$vars) {
  if (isset($vars['element']['#original_link']['href']) && 'messages' == $vars['element']['#original_link']['href']) {
    $vars['element']['#title'] = od_privatemsg_title_callback();
    $vars['element']['#localized_options']['html'] = TRUE;
  }
}

function od_privatemsg_title_callback($title = NULL) {
  $count = privatemsg_unread_count();
  if ($count > 0) {
    return t("Messages <span class='messages-count'>@count</a>", array('@count' => $count));
  }
  return t('Messages');
}


/**
 * Implementation of hook_menu().
 */
function od_common_menu() {
  $items = array();
  
  $items['node/%node/actualize'] = array(
    'title' => 'Actualize dataset',
    'page callback' => 'od_common_actualize_page_callback',
    'page arguments' => array(1),
    'access callback' => 'od_common_actualize_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'od_common.actualize_pasport.page.inc',
  );

  return $items;
}

function od_common_actualize_access_callback($node) {
  if (!(is_object($node) && isset($node->type) && $node->type == 'dataset')) {
    return FALSE;
  }
  elseif ($GLOBALS['user']->uid == 1) {
    return TRUE;
  }

  return (od_publisher_node_access($node, 'edit', $GLOBALS['user']) == NODE_ACCESS_ALLOW);
}

function od_common_field_formatter_info() {
  $info = array();

  $info['od_common_recline_link_formatter_multivolume'] = array(
    'label' => t('Recline link (for multivolume and not)'),
    'field types' => array('recline_field', 'file'),
    'description' => t('Displays file as a link.'),
  );

  $info['od_common_recline_link_formatter_multivolume_from_resource'] = array(
    'label' => t('Recline link from resource (for multivolume and not)'),
    'field types' => array('recline_field', 'file'),
    'description' => t('Displays file as a link.'),
  );

  if (module_exists('od_pubdlcnt')) {
    $info['od_common_file_dlcnt'] = array(
      'label' => t('Download counts of a file'),
      'field types' => array('file', 'recline_field'),
      'settings' => array(),
    );
  }

  return $info;
}

///**
// * Implements hook_field_widget_form_alter()
// */
//function od_common_field_widget_form_alter(&$element, &$form_state, $context) {
//  if (isset($element[0]['#field_name']) && $element[0]['#field_name'] == 'field_link_remote_file') {
//    $validators = array('od_common_file_widget_clean_filename' => array());
//    foreach ($element[0]['#upload_validators'] as $validator => $info) {
//      $validators[$validator] = $info;
//    }
//
//    foreach ($element as &$_element) {
//      $_element['#upload_validators'] = $validators;
//    }
//  }
//}
//
//function od_common_file_widget_clean_filename(stdClass $file) {
//  if (isset($file->fid)) {
//    $file->filename = preg_replace('/\?.*$/i', '', $file->filename);
//  }
//
//  return array();
//}

function od_common_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'od_common_file_dlcnt':
      foreach ($items as $delta => $item) {
        $count = (integer) od_pubdlcnt_download_count((object) $item);
        //$count = mt_rand(1, time() % 3682 + 1);
        $build = array(
          '#prefix' => '<div class="od-common-pubdlcnt-count-wrapper">',
          '#suffix' => '</div>',
          'file' => array(
            '#markup' => "<span class=\"value\">{$count}</span>"
          ),
        );

        $element[$delta] = $build;
      }

      break;
    case 'od_common_recline_link_formatter_multivolume':
      od_common_module('od_common_recline_link_formatter_multivolume');
      od_common_module__recline_link_formatter_multivolume($element, $entity_type, $entity, $field, $instance, $langcode, $items, $display);
      break;
    case 'od_common_recline_link_formatter_multivolume_from_resource':

      od_common_module('od_common_recline_link_formatter_multivolume');
      od_common_module__recline_link_formatter_multivolume($element, $entity_type, $entity, $field, $instance, $langcode, $resources, $display);
      break;
  }

  return $element;
}

/**
 * Returns HTML for an recline field formatter.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: Associative array of recline field
 *
 * @ingroup themeable
 */
function theme_od_common_recline_link_formatter($variables) {
  $file = $variables['item'];

  $url = file_create_url($file['uri']);

  $icon = '';

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options = $variables['options'];
  $options['attributes']['type'] = $file['filemime'] . '; length=' . $file['filesize'];

  // Use the description as the link text if available.
  if (empty($file['description'])) {
    $link_text = $file['filename'];
  }
  else {
    $link_text = $file->description;
    $options['attributes']['title'] = check_plain($file['filename']);
  }

  $variables['title'] = !$variables['title'] ? t('Download') : $variables['title'];
  $file = l($variables['title'], $url, $options);
  return '<div class="download">' . $file . '</div><span class="data-explorer"></span>';
}

/**
 * Loads module from submodules directory
 * @param $module
 * @param $silent (optional)
 *  Set to TRUE if it's needed to prevent throwing an exception. Defaults to FALSE.
 * @return mixed
 * @throws Exception
 */
function od_common_module($module, $silent = FALSE) {
  $cache = &drupal_static(__FUNCTION__, array());
  $cache_key = $module;
  if (!isset($cache[$cache_key])) {
    //module_load_include($module. '.inc', 'od_common');
    $filepath = drupal_get_path('module', 'od_common'). '/submodules/'. $module. '.inc';
    $cache[$cache_key] = file_exists($filepath);
    //If file not exists
    if (!$cache[$cache_key] && !$silent) {
      throw new Exception("od_common module named \"{$module}\" was not found in \"{$filepath}\"");
    }

    if ($cache[$cache_key]) {
      //Now we know that file exists, so include it
      require_once $filepath;
    }
  }

  return $cache[$cache_key];
}

/**
 * @param $module
 * @return bool
 */
function od_common_module_loaded($module) {
  $cache = &drupal_static('od_common_module', array());
  $cache_key = $module;

  return isset($cache[$cache_key]);
}

/**
 * Implements hook_page_delivery_callback_alter()
 */
function od_common_page_delivery_callback_alter(&$callback) {
}

/**
 * Implements hook_user_delete().
 */
function od_common_user_delete($account) {
  if ($account->uid == OD_COMMON_IMPORT_USER_ID) {
    throw new Exception('Вы не можете удалить пользователя "Робот импорта открытых данных" с идентификатором ' . OD_COMMON_IMPORT_USER_ID);
  }
}

function od_common_core_user_is_admin($account = NULL) {
  //$account = $account === NULL ? $_GET['user'] : $account;
  return user_access('administer', $account);
}

/**
 * Implements hook_js_alter().
 * Hides js links 'show row weights' in forms.
 */
function od_common_js_alter(&$javascript) {
  global $user;
  if (!od_common_core_user_is_admin($user) && isset($javascript['misc/tabledrag.js'])) {
    /**
     * Find next after modal.js element to get his weight property.
     */
    reset($javascript);
    $ctools_modal = 'misc/tabledrag.js';
    $ctools_modal_after = FALSE;
    while (list($key) = each($javascript)) {
      if ($key == $ctools_modal) {
        $ctools_modal_after = current($javascript);
        break;
      }
    }
    
    /**
     * Add new element to the list and set his weight.
     */
    if ($ctools_modal_after !== FALSE) {
      $skp_ctools_modal = drupal_get_path('module', 'od_common') . '/js/alters/tabledrag_js_alter.js';
      $javascript[$skp_ctools_modal] = drupal_js_defaults($skp_ctools_modal);
      $javascript[$skp_ctools_modal]['weight'] = $javascript[$ctools_modal]['weight'] + (
        ($ctools_modal_after['weight'] - $javascript[$ctools_modal]['weight']) / 2
      );
    }
  }

//  foreach ($javascript['settings']['data'] as $_index => &$_list) {
//    foreach ($_list as $_modulename => &$_settings) {
//      switch ($_modulename) {
//        case 'superfish':
//          foreach ($_settings as &$_sf) {
//            $_sf['sf']['onBeforeShow'] = 'function(ul) { Drupal.superFish.onBeforeShow(); }';
//          }
//
//          unset ($_sf);
//          break;
//      }
//    }
//
//    unset($_settings);
//  }
//
//  // Prevent reference re-using further.
//  unset($_list);
}

/**
 * Implements hook_preprocess_THEME().
 */
function od_common_preprocess_username(&$vars) {
  $vars['name'] = format_username($vars['account']);
}


/**
 * Implements hook_node_access()
 */
function od_common_node_access($node, $op, $account) {
  if (is_object($node) && $node->type == 'idea' && $op == 'update' && $node->status == 1 && !user_access('administer', $account)) {
    return NODE_ACCESS_DENY;
  }
  return NODE_ACCESS_IGNORE;
}


function od_common_preprocess_privatemsg_view(&$vars) {
  $message = $vars['message'];
  $vars['message_timestamp'] = _od_common_privatemsg_format_date($message->timestamp);
}

function od_common_preprocess_privatemsg_recipients(&$vars) {
  $vars['participants'] = ''; // assign a default empty value
  if (isset($vars['thread']['participants'])) {
    $vars['participants'] = _od_common_privatemsg_format_participants($vars['thread']['participants']);
  }
}

/**
 * Formats a timestamp according to the defines rules.
 *
 * @param $timestamp
 *   UNIX Timestamp.
 *
 * @return
 *   The formatted date.
 */
function _od_common_privatemsg_format_date($timestamp) {
  if ($timestamp > ((int)(REQUEST_TIME / 3600)) * 3600) {
    return t('@interval ago', array('@interval' => format_interval(abs(REQUEST_TIME - $timestamp), 1)));
  }
  if ($timestamp > ((int)(REQUEST_TIME / 86400)) * 86400) {
    return format_date($timestamp, 'custom', 'd.m.Y, H:i');
  }
  if ($timestamp > mktime(0, 0, 0, 1, 0, date('Y'))) {
    return format_date($timestamp, 'custom', 'd.m.Y, H:i');
  }
  return format_date($timestamp, 'custom', 'd.m.Y');
}

/**
 * Format an array of user objects.
 *
 * @param $part_array
 *   Array with user objects, for example the one returned by
 *   _privatemsg_generate_user_array.
 *
 * @param $limit
 *   Limit the number of user objects which should be displayed.
 * @param $no_text
 *   When TRUE, don't display the Participants/From text.
 * @return
 *   String with formatted user objects, like user1, user2.
 */
function _od_common_privatemsg_format_participants($part_array, $limit = NULL, $no_text = FALSE) {
  global $user;
  if (count($part_array) > 0) {
    $to = array();
    $limited = FALSE;
    foreach ($part_array as $account) {

      // Directly address the current user.
      if (isset($account->type) && in_array($account->type, array('hidden', 'user')) && $account->recipient == $user->uid) {
        array_unshift($to, $no_text ? t('You') : t('you'));
        continue;
      }

      // Don't display recipients with type hidden.
      if (isset($account->type) && $account->type == 'hidden') {
        continue;
      }
      if (is_int($limit) && count($to) >= $limit) {
        $limited = TRUE;
        break;
      }
      $to[] = privatemsg_recipient_format($account);
    }

    $limit_string = '';
    if ($limited) {
      $limit_string = t(' and others');
    }


    if ($no_text) {
      return implode(', ', $to) . $limit_string;
    }

    $last = array_pop($to);
    if (count($to) == 0) { // Only one participant
      return t("From you");
    }
    else { // Multiple participants..
      $participants = implode(', ', $to);
      return t('Between !participants and !last', array('!participants' => $participants, '!last' => $last));
    }
  }
  return '';
}

/**
 * Implements hook_views_api().
 */
function od_common_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'od_common') . '/views',
  );
}
