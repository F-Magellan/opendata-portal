<?php

/**
 * Define module root directory.
 */
define('OD_COMMON', dirname(__FILE__));

/**
 * Load ajax commands.
 */
require_once OD_COMMON . '/od_common.ajax_commands.inc';

/**
 * Load constants.
 */
require_once OD_COMMON . '/includes/constants.inc';

/**
 * Implements hook_module_implements_alter()
 */
function od_common_module_implements_alter(&$implementations, $hook) {
  //Убиваем имплементацию hook_node_view() модуля dkan_datastore
  if ($hook == 'node_view' && isset($implementations['dkan_datastore'])) {
    unset($implementations['dkan_datastore']);
  }
  elseif ($hook == 'i18n_object_info' && isset($implementations['i18n_taxonomy'])) {
    unset($implementations['i18n_taxonomy']);
  }
  elseif ($hook == 'form_alter' && isset($implementations['privatemsg'])) {
    $saved_alter = $implementations['od_common'];
    unset($implementations['od_common']);
    $implementations['od_common'] = $saved_alter;
  }
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * where all our own plugins are.
 */
function od_common_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_permission()
 */
function od_common_permission() {
  $perms = array();

  $perms['od_common localize access taxonomy_term'] = array(
    'title' => t('Localize taxonomy terms'),
  );

  return $perms;
}


/**
 * Implements hook_library()
 */
function od_common_library() {
  $libraries = array();

  $path = drupal_get_path('module', 'od_common');
  $libraries['jquery.tiptip'] = array(
    'title' => 'jQuery TipTip',
    'website' => 'http://code.drewwilson.com/entry/tiptip-jquery-plugin',
    'version' => '1.3',
    'js' => array(
      "{$path}/libraries/jquery/tiptip/jquery.tipTip.js"  => array(),
    ),
    'css' => array(
      "{$path}/libraries/jquery/tiptip/tipTip.css"  => array(),
    ),
  );

  $libraries['jquery.tooltip'] = array(
    'title' => 'jQuery Tooltip',
    //'website' => 'http://code.drewwilson.com/entry/tiptip-jquery-plugin',
    //'version' => '1.3',
    'js' => array(
      "{$path}/libraries/jquery/jquery-tooltip/jquery.tooltip.min.js"  => array(),
    ),
    'css' => array(
      "{$path}/libraries/jquery/jquery-tooltip/jquery.tooltip.css"  => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_entity_property_info_alter()
 */
function od_common_entity_property_info_alter(&$info) {
  $info['node']['properties']['clone_title'] = array(
    'label' => t('Title clone'),
    'type' => 'text',
    'description' => t('Title clone field. Gets title property'),
    'getter callback' => 'od_common_entity_property_verbatim_get',
    'real property' => 'title',
    'computed' => TRUE,
  );
}

function od_common_entity_property_verbatim_get($data, array $options, $name, $type, $info) {
  $name = isset($info['real property']) ? $info['real property'] : $name;
  return entity_property_verbatim_get($data, $options, $name, $type, $info);
}

/**
 * Implements hook_form_alter()
 */
function od_common_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'dataset_actualization_entityform_edit_form': //Актуализация паспорта
    case 'od_preprocess_wizard_entityform_edit_form': //Форма создания набора данных
      od_common_module('od_preprocess_wizard_entityform_edit_alter');
      _od_common_form_od_preprocess_wizard_entityform_edit_form_alter($form, $form_state);
      break;
    case 'views_exposed_form':
      od_common_module('map_views_alter');
      _od_common_map_views_form_views_exposed_form_alter($form, $form_state);
      break;
    case 'user_register_form':
      od_common_module('od_user_register_alter');
      _od_common_form_user_register_form_alter($form, $form_state);
      break;
    case 'user_login':
      od_common_module('od_user_login_alter');
      _od_common_form_user_login_alter($form, $form_state);
      break;
    case 'user_pass':
      od_common_module('od_user_reset_pass_alter');
      _od_common_form_user_pass_alter($form, $form_state);
      break;
    case 'user_profile_form':
      od_common_module('od_user_profile_form_alter');
      _od_common_form_user_profile_form_alter($form, $form_state);
      break;
  }
  //Translate submit button
  if (isset($form['#entity_type']) && $form['#entity_type'] == 'entityform') {
    $form['actions']['submit']['#value'] = t($form['actions']['submit']['#value']);
  }
  //Hide 'Your name' form ilement for comment form
  if (isset($form['#entity_type']) && $form['#entity_type'] == 'comment') {
    unset($form['author']['_author']);
  }
}

/**
 * Implements hook_preprocess_form_element()
 */
function od_common_preprocess_form_element(&$variables) {
  if (isset($variables['element']['#field_name']) && $variables['element']['#field_name'] == 'field_license') {
    od_common_module('od_preprocess_wizard_entityform_edit_alter');
    _od_common_form_od_preprocess_wizard_entityform_edit_preprocess_form_element($variables);
  }
}

/**
 * Implements hook_popup_description_exclusions()
 */
function od_common_popup_description_exclusions() {
  return array(
    'edit-field-license-und',
  );
}
/**
 * Implements hook_preprocess_THEMEHOOK()
 */
function od_common_preprocess_date_combo(&$vars) {
  $paths = array(
    'dataset-actions/add-new-dataset',
    'eform/submit/od-preprocess-wizard',
  );

  if (drupal_match_path($_GET['q'], implode("\n", $paths))) {
    $vars['theme_hook_suggestion'] = 'od_common_date_combo';

    //Include our module that contains necessary theme function
    od_common_module('od_combo_theme_replacement');
  }
}

/**
 * Implements hook_theme()
 */
function od_common_theme() {
  $themes = array();

  $themes['od_common_date_combo'] = array(
    //'file' => 'date.theme',
    //'path' => drupal_get_path('module', 'od_common'),
    'render element' => 'element',
  );

  return $themes;
}

/**
 * Implements hook_menu_alter().
 * Изменяем название вкладки Edit и View для Набора данных.
 */
function od_common_menu_alter(&$items) {
  unset($items['node/%node/view']['title']);
  $items['node/%node/view']['title callback'] = 'od_common_view_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
  
  unset($items['node/%node/edit']['title']);
  $items['node/%node/edit']['title callback'] = 'od_common_edit_tab_title';
  $items['node/%node/edit']['title arguments'] = array(1);
  
}

function od_common_view_tab_title($node) {
  if ($node->type == 'dataset') {
    return t('Passport');
  }
  return t('View');
}

function od_common_edit_tab_title($node) {
  if ($node->type == 'dataset') {
    return t('Edit passport');
  }
  return t('Edit');
}

/**
 * Implementation of hook_menu().
 */
function od_common_menu() {
  $items = array();
  
  $items['node/%node/actualize'] = array(
    'title' => 'Actualize dataset',
    'page callback' => 'od_common_actualize_page_callback',
    'page arguments' => array(1),
    'access callback' => 'od_common_actualize_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'od_common.actualize_pasport.page.inc',
  );

  $items['sparql_page'] = array(
    'title' => '',
    'page callback' => 'sparql_page_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function od_common_actualize_access_callback($node) {
  if (!(is_object($node) && isset($node->type) && $node->type == 'dataset')) {
    return FALSE;
  }
  elseif ($GLOBALS['user']->uid == 1) {
    return TRUE;
  }

  return (od_publisher_node_access($node, 'edit', $GLOBALS['user']) == NODE_ACCESS_ALLOW);
}

function od_common_field_formatter_info() {
  $info = array();

  if (module_exists('od_pubdlcnt')) {
    $info['od_common_file_dlcnt'] = array(
      'label' => t('Download counts of a file'),
      'field types' => array('file', 'recline_field'),
      'settings' => array(),
    );
  }

  return $info;
}

///**
// * Implements hook_field_widget_form_alter()
// */
//function od_common_field_widget_form_alter(&$element, &$form_state, $context) {
//  if (isset($element[0]['#field_name']) && $element[0]['#field_name'] == 'field_link_remote_file') {
//    $validators = array('od_common_file_widget_clean_filename' => array());
//    foreach ($element[0]['#upload_validators'] as $validator => $info) {
//      $validators[$validator] = $info;
//    }
//
//    foreach ($element as &$_element) {
//      $_element['#upload_validators'] = $validators;
//    }
//  }
//}
//
//function od_common_file_widget_clean_filename(stdClass $file) {
//  if (isset($file->fid)) {
//    $file->filename = preg_replace('/\?.*$/i', '', $file->filename);
//  }
//
//  return array();
//}

function od_common_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'od_common_file_dlcnt':
      foreach ($items as $delta => $item) {
        $count = (integer) od_pubdlcnt_download_count((object) $item);
        //$count = mt_rand(1, time() % 3682 + 1);
        $build = array(
          '#prefix' => '<div class="od-common-pubdlcnt-count-wrapper">',
          '#suffix' => '</div>',
          'file' => array(
            '#markup' => "<span class=\"value\">{$count}</span>"
          ),
        );

        $element[$delta] = $build;
      }

      break;
  }

  return $element;
}

/**
 * Loads module from submodules directory
 * @param $module
 * @return mixed
 * @throws Exception
 */
function od_common_module($module) {
  $cache = &drupal_static(__FUNCTION__, array());
  $cache_key = $module;
  if (!isset($cache[$cache_key])) {
    //module_load_include($module. '.inc', 'od_common');
    $filepath = drupal_get_path('module', 'od_common'). '/submodules/'. $module. '.inc';
    $cache[$cache_key] = file_exists($filepath);
    //If file not exists
    if (!$cache[$cache_key]) {
      throw new Exception("od_common module named \"{$module}\" was not found in \"{$filepath}\"");
    }

    //Now we know that file exists, so include it
    require_once $filepath;
  }

  return $cache[$cache_key];
}

/**
 * @param $module
 * @return bool
 */
function od_common_module_loaded($module) {
  $cache = &drupal_static('od_common_module', array());
  $cache_key = $module;

  return isset($cache[$cache_key]);
}

/**
 * Implements hook_page_delivery_callback_alter()
 */
function od_common_page_delivery_callback_alter(&$callback) {
  if (od_common_module_loaded('od_preprocess_wizard_entityform_edit_alter')) {
    _od_common_page_delivery_callback_alter($callback);
  }
}

/**
 * Implements hook_user_delete().
 */
function od_common_user_delete($account) {
  if ($account->uid == OD_COMMON_IMPORT_USER_ID) {
    throw new Exception('Вы не можете удалить пользователя "Робот импорта открытых данных" с идентификатором ' . OD_COMMON_IMPORT_USER_ID);
  }
}
