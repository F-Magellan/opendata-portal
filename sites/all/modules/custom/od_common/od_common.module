<?php
/**
 * @file
 */

/**
 * Implements hook_module_implements_alter()
 */
function od_common_module_implements_alter(&$implementations, $hook) {
  //Убиваем имплементацию hook_node_view() модуля dkan_datastore
  if ($hook == 'node_view' && isset($implementations['dkan_datastore'])) {
    unset($implementations['dkan_datastore']);
  }
  elseif ($hook == 'i18n_object_info' && isset($implementations['i18n_taxonomy'])) {
    unset($implementations['i18n_taxonomy']);
  }
}

/**
 * Implements hook_permission()
 */
function od_common_permission() {
  $perms = array();

  $perms['od_common localize access taxonomy_term'] = array(
    'title' => t('Locilize taxonomy terms'),
  );

  return $perms;
}

/**
 *  Implements hook_form_FORM_ID_alter()
 */
function od_common_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['field_geolocation_distance']['googlemap'])) {
    unset($form['field_geolocation_distance']['googlemap']['address']['geocode']);
    $form['field_geolocation_distance']['googlemap']['help']['#markup']=t('Enter an address / location in the textfield');
  }
}/**
 * Implements hook_preprocess_THEMEHOOK()
 */
function od_common_preprocess_date_combo(&$vars) {
  $paths = array(
    'dataset-actions/add-new-dataset',
    'eform/submit/od-preprocess-wizard',
  );

  if (drupal_match_path($_GET['q'], implode("\n", $paths))) {
    $vars['theme_hook_suggestion'] = 'od_common_date_combo';
  }
}

/**
 * Implements hook_theme()
 */
function od_common_theme() {
  $themes = array();

  $themes['od_common_date_combo'] = array(
    //'file' => 'date.theme',
    //'path' => drupal_get_path('module', 'od_common'),
    'render element' => 'element',
  );

  return $themes;
}

/**
 * Returns HTML for a start/end date combination on form.
 * Customized theme for date_combo. Puts away all fieldset elements
 */
function theme_od_common_date_combo($variables) {
  $element = $variables['element'];
  $field = field_info_field($element['#field_name']);
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);

  // Group start/end items together in fieldset.
  $fieldset = array(
    '#title' => t($element['#title']) . ' ' . ($element['#delta'] > 0 ? intval($element['#delta'] + 1) : ''),
    '#value' => '',
    '#description' => !empty($element['#fieldset_description']) ? $element['#fieldset_description'] : '',
    '#attributes' => array(),
    '#children' => $element['#children'],
    '#type' => 'item',
  );

  //return theme('fieldset', array('element' => $fieldset));

  $element = $fieldset;
  element_set_attributes($element, array('id'));
  _form_set_class($element, array('form-wrapper'));

  $output = '<div' . drupal_attributes($element['#attributes']) . '>';
  if (!empty($element['#title'])) {
    // Always wrap fieldset legends in a SPAN for CSS positioning.
    $output .= '<div class="legend"><span class="fieldset-legend">' . $element['#title'] . '</span></div>';
  }
  $output .= '<div class="fieldset-wrapper">';
  if (!empty($element['#description'])) {
    $output .= '<div class="fieldset-description">' . $element['#description'] . '</div>';
  }
  $output .= $element['#children'];
  if (isset($element['#value'])) {
    $output .= $element['#value'];
  }
  $output .= '</div>';
  $output .= "</div>\n";

  return $output;
}
