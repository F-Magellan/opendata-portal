<?php
/**
 * @file
 */

/* Load additional files */
$__dirname = dirname(__FILE__);
require_once $__dirname. '/od_common.pubdlcnt.inc'; //Public download count related things

/**
 * Implements hook_module_implements_alter()
 */
function od_common_module_implements_alter(&$implementations, $hook) {
  //Убиваем имплементацию hook_node_view() модуля dkan_datastore
  if ($hook == 'node_view' && isset($implementations['dkan_datastore'])) {
    unset($implementations['dkan_datastore']);
  }
  elseif ($hook == 'i18n_object_info' && isset($implementations['i18n_taxonomy'])) {
    unset($implementations['i18n_taxonomy']);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * where all our own plugins are.
 */
function od_common_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_permission()
 */
function od_common_permission() {
  $perms = array();

  $perms['od_common localize access taxonomy_term'] = array(
    'title' => t('Localize taxonomy terms'),
  );

  return $perms;
}

/**
 *  Implements hook_form_FORM_ID_alter()
 *  Изменяем вывод внешнего фильтра в картах.
 */
function od_common_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['field_geolocation_distance']['googlemap'])) {
    unset($form['field_geolocation_distance']['googlemap']['address']['geocode']);
    $form['field_geolocation_distance']['googlemap']['help']['#markup']=t('Enter an address / location in the textfield');
  }
}

/**
 * Implements hook_preprocess_THEMEHOOK()
 */
function od_common_preprocess_date_combo(&$vars) {
  $paths = array(
    'dataset-actions/add-new-dataset',
    'eform/submit/od-preprocess-wizard',
  );

  if (drupal_match_path($_GET['q'], implode("\n", $paths))) {
    $vars['theme_hook_suggestion'] = 'od_common_date_combo';
  }
}

/**
 * Implements hook_theme()
 */
function od_common_theme() {
  $themes = array();

  $themes['od_common_date_combo'] = array(
    //'file' => 'date.theme',
    //'path' => drupal_get_path('module', 'od_common'),
    'render element' => 'element',
  );

  return $themes;
}

/**
 * Returns HTML for a start/end date combination on form.
 * Customized theme for date_combo. Puts away all fieldset elements
 */
function theme_od_common_date_combo($variables) {
  $element = $variables['element'];
  $field = field_info_field($element['#field_name']);
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);

  // Group start/end items together in fieldset.
  $fieldset = array(
    '#title' => t($element['#title']) . ' ' . ($element['#delta'] > 0 ? intval($element['#delta'] + 1) : ''),
    '#value' => '',
    '#description' => !empty($element['#fieldset_description']) ? $element['#fieldset_description'] : '',
    '#attributes' => array(),
    '#children' => $element['#children'],
    '#type' => 'item',
  );

  //return theme('fieldset', array('element' => $fieldset));

  $element = $fieldset;
  element_set_attributes($element, array('id'));
  _form_set_class($element, array('form-wrapper'));

  $output = '<div' . drupal_attributes($element['#attributes']) . '>';
  if (!empty($element['#title'])) {
    // Always wrap fieldset legends in a SPAN for CSS positioning.
    $output .= '<div class="legend"><span class="fieldset-legend">' . $element['#title'] . '</span></div>';
  }
  $output .= '<div class="fieldset-wrapper">';
  if (!empty($element['#description'])) {
    $output .= '<div class="fieldset-description">' . $element['#description'] . '</div>';
  }
  $output .= $element['#children'];
  if (isset($element['#value'])) {
    $output .= $element['#value'];
  }
  $output .= '</div>';
  $output .= "</div>\n";

  return $output;
}

/**
 * Implements hook_menu_alter().
 * Изменяем название вкладки Edit и View для Набора данных.
 */
function od_common_menu_alter(&$items) {
  unset($items['node/%node/view']['title']);
  $items['node/%node/view']['title callback'] = 'od_common_view_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
  
  unset($items['node/%node/edit']['title']);
  $items['node/%node/edit']['title callback'] = 'od_common_edit_tab_title';
  $items['node/%node/edit']['title arguments'] = array(1);
  
}

function od_common_view_tab_title($node) {
  if ($node->type == 'dataset') {
    return t('Passport');
  }
  return t('View');
}

function od_common_edit_tab_title($node) {
  if ($node->type == 'dataset') {
    return t('Edit passport');
  }
  return t('Edit');
}

/**
 * Implementation of hook_menu().
 */
function od_common_menu() {
  $items = array();
  
  $items['node/%node/actualize'] = array(
    'title' => 'Actualize passport',
    'page callback' => 'od_common_actualize_page_callback',
    'page arguments' => array(1),
    'access callback' => 'od_common_actualize_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  
  return $items;
}

function od_common_actualize_page_callback($dataset) {
  drupal_goto('actualize-dataset', array('query' => array('field_ef_dataset'=>$dataset->nid)));
}

function od_common_actualize_access_callback($dataset) {
  return (od_publisher_node_access($dataset, 'edit', $GLOBALS['user']) == NODE_ACCESS_DENY ? FALSE : TRUE);
}

function od_common_field_formatter_info() {
  $info = array();

  $info['od_common_file_dlcnt'] = array(
    'label' => t('Download counts of a file'),
    'field types' => array('file', 'recline_field'),
    'settings' => array(),
  );

  return $info;
}

function od_common_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'od_common_file_dlcnt':
      foreach ($items as $delta => $item) {
        $count = (integer) od_common_pubdlcnt_count((object)$item);
        $build = array(
          '#prefix' => '<div class="od-common-pubdlcnt-count-wrapper">',
          '#suffix' => '</div>',
          'file' => array(
            '#markup' => "<span class=\"value\">{$count}</span>"
          ),
        );

        $element[$delta] = $build;
      }
      break;
  }

  return $element;
}