<?php

/**
 * defined into od_file_preprocess module:
 *   CSV_ENCLOSURE
 *   CSV_DELIMETER
 *   CRLF
 *   od_file_preprocess_structure_headers()
 *   od_file_preprocess_table_mimes()
 */


function od_file_process_menu() {
  $items = array();

  $items['od_download/files'] = array(
    'title' => 'File download',
    'page callback' => 'file_download',
    'page arguments' => array('public'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function od_file_process_file_download($uri) {
  $pathinfo = pathinfo($uri);

  if ($pathinfo['dirname'] != "public://temp_converting_service") {
    return array();
  }

  $headers = array(
    'Content-disposition' => "attachment; {$pathinfo['basename']}",
  );

  return $headers;
}

/**
 * Implements hook_stream_wrappers_mod_get_external_url_alter()
 */
function od_file_process_stream_wrappers_mod_get_external_url_alter(&$sandbox, StreamWrappersModInterface $wrapper) {
  $pathinfo = pathinfo($wrapper->getUri());

  if ($pathinfo['dirname'] != "public://temp_converting_service") {
    return;
  }

  $path = str_replace('\\', '/', $wrapper->getTarget());
  $sandbox['result'] = $GLOBALS['base_url'] . '/od_download/files/' . drupal_encode_path($path);
}

function od_file_process_prepare_playground() {
  static $is_prepared = FALSE;
  if (!$is_prepared) {
    ini_set('memory_limit', '2G');
    set_time_limit(1 * 60 * 60); // 1 Hour

    $is_prepared = TRUE;
  }
}

/**
 * Process data to csv files
 */ 
function od_file_process_2csv($data, $structure) {

  //processor data2csv
  $new_file_data = '';
  $new_file_structure = CSV_ENCLOSURE . implode(CSV_ENCLOSURE . CSV_DELIMETER . CSV_ENCLOSURE, od_file_preprocess_structure_headers()) . CSV_ENCLOSURE . CRLF;
  $col_count = count($structure['col_data']);

  for ($col = 0; $col < $col_count; $col++) {
    $new_file_data .= CSV_ENCLOSURE . $structure['col_data'][$col]['col_name']['value'] . CSV_ENCLOSURE;

    $new_file_structure .= $col + 1 . CSV_DELIMETER;
    $new_file_structure .= CSV_ENCLOSURE . $structure['col_data'][$col]['col_name']['value'] . CSV_ENCLOSURE . CSV_DELIMETER;
    $new_file_structure .= ($structure['col_data'][$col]['col_desc']) ? CSV_ENCLOSURE . $structure['col_data'][$col]['col_desc'] . CSV_ENCLOSURE . CSV_DELIMETER : CSV_DELIMETER;
    $new_file_structure .= CSV_ENCLOSURE . DT_VOCAB . ':' . $structure['col_data'][$col]['datatype'] . CSV_ENCLOSURE;

    if ($col != $col_count - 1) {
      $new_file_data .= CSV_DELIMETER;
      $new_file_structure .= CRLF;
    }
  }

  $new_file_data .= CRLF;
  $row_count = count($data);

  for ($row = 0; $row < $row_count; $row++) {
    for ($col = 0; $col < $col_count; $col++) {
      $datatype = $structure['col_data'][$col]['datatype'];
      if ($datatype == 'dateTime') {
        $val = (array) PHPExcel_Shared_Date::ExcelToPHPObject($data[$row][$col]);
        $val = str_replace(' 00:00:00', '', $val['date']);
      }
      else {
        $val = $data[$row][$col];
      }
      if ($datatype == 'string' && $val) $val = CSV_ENCLOSURE . $val . CSV_ENCLOSURE;
      $new_file_data .= $val;
      if ($col != $col_count - 1) $new_file_data .= CSV_DELIMETER;
    }
    if ($row != $row_count - 1) $new_file_data .= CRLF;
  }

  return array(
    'structure' => $new_file_structure,
    'data' => $new_file_data,
  );  
}


function od_file_process_2xml($data, $structure) {

  $xml = new XmlWriter();
  $xml->openMemory();
  $xml->startDocument('1.0', 'utf-8');
  $xml->startElement('dataset');
  write_xml($xml, $data, 0);
  $xml->endElement();

  $data_xml = $xml->outputMemory(TRUE);

  $xml = new XmlWriter();
  $xml->openMemory();
  $xml->startDocument('1.0', 'utf-8');
  $xml->startElement('xs:schema');
  $xml->startAttribute('xmlns:xs');
  $xml->text('http://www.w3.org/2001/XMLSchema');
  $xml->endAttribute();
  $xml->startElement('xs:annotation');
  $xml->startElement('xs:documentation');
  $xml->startAttribute('xml:lang');
  $xml->text('ru');
  $xml->endAttribute();
  $xml->text($odmeta_description);
  $xml->endElement(); //documentation
  $xml->endElement(); //annotation

  $xml->startElement('xs:element');
  $xml->writeAttribute('name','dataset');
  $xml->writeAttribute('type','customDataSet');
  $xml->endElement(); //element
  $xml->startElement('xs:complexType');
  $xml->startAttribute('name');
  $xml->text('customDataSet');
  $xml->endAttribute();
  $xml->startElement('xs:annotation');
  $xml->startElement('xs:documentation');
  $xml->startAttribute('xml:lang');
  $xml->text('ru');
  $xml->endAttribute();
  $xml->text($odmeta_name);
  $xml->endElement(); //documentation
  $xml->endElement(); //annotation
  $xml->startElement('xs:sequence');
  $xml->startElement('xs:element');
  $xml->writeAttribute('name','data');
  $xml->writeAttribute('type','customData');
  $xml->writeAttribute('minOccurs', '0');
  $xml->writeAttribute('maxOccurs', 'unbounded');
  $xml->endElement(); //element
  $xml->endElement(); //sequence
  $xml->endElement(); //complexType
  
  $xml->startElement('xs:complexType');
  $xml->startAttribute('name');
  $xml->text('customData');
  $xml->endAttribute();
  $xml->startElement('xs:annotation');
  $xml->startElement('xs:documentation');
  $xml->startAttribute('xml:lang');
  $xml->text('ru');
  $xml->endAttribute();
  $xml->text('Описание структуры полей'); // <------- !!!
  $xml->endElement(); //documentation
  $xml->endElement(); //annotation
  
  $xml->startElement('xs:sequence');
  foreach ($structure['col_data'] as $key => $col_data) {
    $xml->startElement('xs:element');
    $xml->startAttribute('name');
    $xml->text('value-' . $key);
    $xml->endAttribute(); //name
    $xml->startAttribute('type');
    $xml->text('xs:' . $col_data['datatype']);
    $xml->endAttribute(); //type
    $xml->startElement('xs:annotation');
    $xml->startElement('xs:documentation');
    $xml->startAttribute('xml:lang');
    $xml->text('ru');
    $xml->endAttribute();
    $xml->text($col_data['col_name']['value']);
    $xml->endElement(); //documentation
    $xml->endElement(); //annotation
    $xml->endElement(); //element
  }

  $xml->endElement(); //sequence
  $xml->endElement(); //complexType
  $xml->endElement(); //schema
  $structure_xml = $xml->outputMemory(TRUE);
  
  return array(
    'structure' => $structure_xml,
    'data' => $data_xml,
  );
}


function write_xml(XMLWriter $xml, $data, $level) {
  foreach($data as $key => $value) {
    //dsm($key);
    //dsm($value);
    $key_r = $level ? 'value-' . $key : 'data';
    if (is_array($value)) {
      $xml->startElement($key_r);
      write_xml($xml, $value, $level+1);
      $xml->endElement();
      continue;
    }
    $xml->writeElement($key_r, $value);
  }
}

function od_file_process_structure_load($fid) {
  return reset(universal_data_storage_load_by_bind($fid, 'od_file_process_structure'));
}

function od_file_process_structure_record($structure, $fid) {
  return universal_data_storage_create($structure, $fid, 'od_file_process_structure');
  //universal_data_storage_save($record);
}