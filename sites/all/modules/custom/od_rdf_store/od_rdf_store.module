<?php

// Максимальный размер загружаемого в хранилище документа
define('OD_RDF_MAX_ALLOWED_FILESIZE', 32 * 1024 * 1024);
// Максимальный размер скачиваемого документа
define('OD_RDF_MAX_ALLOWED_HTTP_FILESIZE', 4 * 1024 * 1024);

define('OD_RDF_RDF_MIMETYPE', 'application/rdf+xml');

function od_rdf_store_menu() {
  // @todo use access RDF data permission instead of access content.
  $items['sparql'] = array(
    'title' => 'SPARQL endpoint',
    'page callback' => 'od_rdf_store_sparql_endpoint',
    'access arguments' => array('access content'),
  );

  $items['sparql_query'] = array(
    'title' => 'SPARQL endpoint',
    'page callback' => 'od_rdf_store_sparql_endpoint',
    'access arguments' => array('access content'),
  );

  return $items;
}

function od_rdf_store_sparql_endpoint() {

  $form = array();

  // Instantiate the ARC2 SPARQL endpoint.
  $ep = od_rdf_store_sparql_get_store('site_endpoint', SPARQL_ENDPOINT);
  $form['page_content']['#markup'] = $ep->go();


  return render($form);
}

/**
 * @param $name
 * @param string $type
 * @return ARC2_StoreEndpoint
 */
function od_rdf_store_sparql_get_store($name, $type = 'store') {
  $db = $GLOBALS['databases']['default']['default'];
  $name = "sparql_store_$name";

  $config = array(
    /* db */
    'db_host' => $db['host'],
    'db_name' => $db['database'],
    'db_user' => $db['username'],
    'db_pwd' => $db['password'],
    /* store */
    'store_name' => $name,

    /* endpoint */
    'endpoint_features' => array(
      'select', 'construct', 'ask', 'describe',
      'load', 'insert', 'delete',
      'dump' /* dump is a special command for streaming SPOG export */
    ),
    'endpoint_timeout' => 60, /* not implemented in ARC2 preview */
    'endpoint_read_key' => '', /* optional */
    'endpoint_write_key' => 'somekey', /* optional */
    'endpoint_max_limit' => 500, /* optional */
  );

  /* instantiation */
  if ($type == SPARQL_ENDPOINT) {
    $store = ARC2::getStoreEndpoint($config);

    od_rdf_store_init_class();
    ARC2::inc('StoreEndpoint');
    $cls = 'ODStoreEndPoint';
    $caller = new stdClass();

    return new $cls($config, $caller);
  }
  else {
    $store = ARC2::getStore($config);
  }
  if (!$store->isSetUp()) {
    $store->setUp();
  }
  return $store;
}


/**
 * Implements hook_node_insert().
 */
function od_rdf_store_node_insert($node) {
  if ($node->type == 'resource') {
    if (!empty($node->field_upload[LANGUAGE_NONE][0])) {
      od_rdf_store_load_file_to_storage(file_load($node->field_upload[LANGUAGE_NONE][0]['fid']));
    }
    if (!empty($node->field_link_remote_file[LANGUAGE_NONE][0])) {
      od_rdf_store_load_file_to_storage(file_load($node->field_link_remote_file[LANGUAGE_NONE][0]['fid']));
    }
  }
}

/**
 * Implements hook_node_update().
 */
function od_rdf_store_node_update($node) {
  if ($node->type == 'resource') {
    $oldnode = node_load($node->nid);
    if (_get_file_fid($node->field_upload) != _get_file_fid($oldnode->field_upload)) {
      if ($oldfid = _get_file_fid($oldnode->field_upload)) {
        od_rdf_store_remove_file_from_storage(file_load($oldfid));
      }
      if (!empty($node->field_upload[LANGUAGE_NONE][0])) {
        od_rdf_store_load_file_to_storage(file_load($node->field_upload[LANGUAGE_NONE][0]['fid']));
      }
    }
    if (_get_file_fid($node->field_link_remote_file) != _get_file_fid($oldnode->field_link_remote_file)) {
      if ($oldfid = _get_file_fid($oldnode->field_link_remote_file)) {
        od_rdf_store_remove_file_from_storage(file_load($oldfid));
      }
      if (!empty($node->field_link_remote_file[LANGUAGE_NONE][0])) {
        od_rdf_store_load_file_to_storage(file_load($node->field_link_remote_file[LANGUAGE_NONE][0]['fid']));
      }
    }
  }
}

function od_rdf_store_node_delete($node) {
  if ($node->type == 'resource') {
    if ($fid = _get_file_fid($node->field_upload)) {
      od_rdf_store_remove_file_from_storage(file_load($fid));
    }
    if ($fid = _get_file_fid($node->field_link_remote_file)) {
      od_rdf_store_remove_file_from_storage(file_load($fid));
    }
  }
}

function _get_file_fid($field) {
  $fid = FALSE;
  if (!empty($field[LANGUAGE_NONE][0]['fid'])) {
    $fid = $field[LANGUAGE_NONE][0]['fid'];
  }
  return $fid;
}

function od_rdf_store_load_file_to_storage($file) {
  if ($file->filemime == OD_RDF_RDF_MIMETYPE) {
    $uri = FALSE;
    if (file_uri_scheme($file->uri) == 'http') {
      $uri = $file->uri;
      if (filesize($uri) > OD_RDF_MAX_ALLOWED_HTTP_FILESIZE) {
        watchdog('od_rdf_store', 'File %filename could not be loaded into RDF-storage. Max allowed file size for remote files is %filesize.', array('%filename' => $uri, '%filesize' => format_size(OD_RDF_MAX_ALLOWED_HTTP_FILESIZE)));
        drupal_set_message(t('File %filename could not be loaded into RDF-storage. Max allowed file size for remote files is %filesize.', array('%filename' => $uri, '%filesize' => format_size(OD_RDF_MAX_ALLOWED_HTTP_FILESIZE))));
        return;
      }
    }
    elseif (file_uri_scheme($file->uri) == 'public') {
      $uri = file_create_url($file->uri);
    }

    if ($uri) {
      if (filesize($uri) > OD_RDF_MAX_ALLOWED_FILESIZE) {
        watchdog('od_rdf_store', 'File %filename could not be loaded into RDF-storage. Max allowed file size is %filesize.', array('%filename' => $uri, '%filesize' => format_size(OD_RDF_MAX_ALLOWED_FILESIZE)));
        drupal_set_message(t('File %filename could not be loaded into RDF-storage. Max allowed file size is %filesize.', array('%filename' => $uri, '%filesize' => format_size(OD_RDF_MAX_ALLOWED_FILESIZE))));
        return;
      }

      $ep = sparql_get_store('site_endpoint');
      if ($result = $ep->query('load <' . $uri . '>')) {
        watchdog('od_rdf_store', 'File %file loaded into RDF-storage. %triples triples added.', array('%file' => $uri, '%triples' => $result['result']['t_count']));
        drupal_set_message(t('File %file loaded into RDF-storage. %triples triples added.', array('%file' => $uri, '%triples' => $result['result']['t_count'])));
      }
    }
  }
}

function od_rdf_store_remove_file_from_storage($file) {
  if ($file->filemime == OD_RDF_RDF_MIMETYPE) {
    $uri = FALSE;
    if (file_uri_scheme($file->uri) == 'http') {
      $uri = $file->uri;
    }
    elseif (file_uri_scheme($file->uri) == 'public') {
      $uri = file_create_url($file->uri);
    }
    if ($uri) {
      $ep = sparql_get_store('site_endpoint');
      if ($result = $ep->query('delete from <' . $uri . '>')) {
        watchdog('od_rdf_store', 'File %file removed from RDF-storage. %triples triples removed.', array('%file' => $uri, '%triples' => $result['result']['t_count']));
        drupal_set_message(t('File %file removed from RDF-storage. %triples triples removed.', array('%file' => $uri, '%triples' => $result['result']['t_count'])));
      }
    }
  }
}

function od_rdf_store_init_class() {


}

require_once 'sites/all/libraries/arc/ARC2.php';
ARC2::inc('StoreEndpoint');
class ODStoreEndPoint extends ARC2_StoreEndpoint {
  function sendHeaders() {
    if (!isset($this->is_dump) || !$this->is_dump) {
      $this->setHeader('content-length', 'Content-Length: ' . strlen($this->getResult()));
      foreach ($this->headers as $k => $v) {
        $header = $k;
        $value = $v;
        if (($ruins = explode(':', $v)) && count($ruins) > 1) {
          $header = $ruins[0];
          $value = $ruins[1];
        }

        drupal_add_http_header($header, $value);
      }
    }
  }

  function getResult() {
    return $this->result;
  }

  /*  */

  function handleRequest($auto_setup = 0) {
    if (!$this->isSetUp()) {
      if ($auto_setup) {
        $this->setUp();
        return $this->handleRequest(0);
      }
      else {
        $this->setHeader('http', 'HTTP/1.1 400 Bad Request');
        $this->setHeader('content-type', 'Content-type: text/plain; charset=utf-8');
        $this->result = 'Missing configuration or the endpoint store was not set up yet.';
      }
    }
    elseif (($img = $this->p('img'))) {
      $this->handleImgRequest($img);
    }
    elseif (($q = $this->p('query'))) {
      $this->checkProcesses();
      $this->handleQueryRequest($q);
      if ($this->p('show_inline')) {
        $this->query_result = '
          <div class="results">
            ' . ($this->p('output') != 'htmltab' ? '<pre>' . htmlspecialchars($this->getResult()) . '</pre>' : $this->getResult()) . '
          </div>
        ';
        $this->handleEmptyRequest(1);
      }
    }
    else {
      $this->handleEmptyRequest();
    }
  }

  /*  */

  function handleEmptyRequest($force = 0) {
    /* service description */
    $formats = array(
      'rdfxml' => 'RDFXML', 'rdf+xml' => 'RDFXML', 'html' => 'HTML'
    );
    if (!$force && $this->getResultFormat($formats, 'html') != 'HTML') {
      $this->handleServiceDescriptionRequest();
    }
    else {
      //$this->setHeader('content-type', 'Content-type: text/html; charset=utf-8');
      $this->result = $this->getHTMLDocBody();
    }
  }

  function getHTMLDocBody() {
    return '
    	<div>
        <div class="intro">
          <p>
            '. t('This interface implements
            <a href="http://www.w3.org/TR/rdf-sparql-query/">SPARQL</a> and
            <a href="https://github.com/semsol/arc2/wiki/SPARQL%2B">SPARQL+</a> via <a href="http://www.w3.org/TR/rdf-sparql-protocol/#query-bindings-http">HTTP Bindings</a>'). '
          </p>
          <p>
            '. t('Enabled operations: ' . join(', ', $this->getFeatures())) . '
          </p>
          <p>
            '. t('Max. number of results : ' . $this->v('endpoint_max_limit', '<em>unrestricted</em>', $this->a)) . '
          </p>
        </div>
        ' . $this->getHTMLDocForm() .'
        ' . ($this->p('show_inline') ? $this->query_result : '') . '
    	</div>
    ';
  }
  function getHTMLDocOptions() {
    $sel = $this->p('output');
    $sel_code = ' selected="selected"';
    return '
      <div class="options">
        <h3>' . t('Options') . '</h3>
        <dl>
          <dt class="first">' . t('Output format (if supported by query type):') . '</dt>
          <dd>
            <select id="output" name="output">
              <option value="" ' . (!$sel ? $sel_code : '') . '>' . t('Default') . '</option>
              <option value="xml" ' . ($sel == 'xml' ? $sel_code : '') . '>XML</option>
              <option value="json" ' . ($sel == 'json' ? $sel_code : '') . '>JSON</option>
              <option value="plain" ' . ($sel == 'plain' ? $sel_code : '') . '>Plain</option>
              <option value="php_ser" ' . ($sel == 'php_ser' ? $sel_code : '') . '>Serialized PHP</option>
              <option value="turtle" ' . ($sel == 'turtle' ? $sel_code : '') . '>Turtle</option>
              <option value="rdfxml" ' . ($sel == 'rdfxml' ? $sel_code : '') . '>RDF/XML</option>
              <option value="infos" ' . ($sel == 'infos' ? $sel_code : '') . '>Query Structure</option>
              ' . ($this->allow_sql ? '<option value="sql" ' . ($sel == 'sql' ? $sel_code : '') . '>SQL</option>' : '') . '
              <option value="htmltab" ' . ($sel == 'htmltab' ? $sel_code : '') . '>HTML Table</option>
              <option value="tsv" ' . ($sel == 'tsv' ? $sel_code : '') . '>TSV</option>
            </select>
          </dd>

          <dt>' . t('jsonp/callback (for JSON results)') . '</dt>
          <dd>
            <input type="text" id="jsonp" name="jsonp" value="' . htmlspecialchars($this->p('jsonp')) . '" />
          </dd>

          <dt>' . t('API key (if required)') . '</dt>
          <dd>
            <input type="text" id="key" name="key" value="' . htmlspecialchars($this->p('key')) . '" />
          </dd>

          <dt>' . t('Show results inline:') . '</dt>
          <dd>
            <input type="checkbox" name="show_inline" value="1" ' . ($this->p('show_inline') ? ' checked="checked"' : '') . ' />
          </dd>

        </dl>
      </div>
      <div class="options-2">' .
        t('Change HTTP method:') . '
        <div class="method-wrapper">
            <input name="method_selector" value="get" type="radio" onclick="javascript:document.getElementById(\'sparql-form\').method=\'get\'" '. ($_SERVER['REQUEST_METHOD'] == 'GET' ? "checked" : "") .'>GET</input>
            <input name="method_selector" value="post" type="radio" onclick="javascript:document.getElementById(\'sparql-form\').method=\'post\'" '. ($_SERVER['REQUEST_METHOD'] == 'POST' ? "checked" : "") .'>POST</input>
        </div>
       </div>
    ';
  }

  function getHTMLDocForm() {
    $q = $this->p('query') ? htmlspecialchars($this->p('query')) : "SELECT * WHERE {\n  GRAPH ?g { ?s ?p ?o . }\n}\nLIMIT 10";
    return '
      <form id="sparql-form" action="?" enctype="application/x-www-form-urlencoded" method="' . ($_SERVER['REQUEST_METHOD'] == 'GET' ? 'get' : 'post' ) . '">
        <textarea id="query" name="query" rows="20" cols="80">' . $q . '</textarea>
        ' . $this->getHTMLDocOptions() . '
        <div class="form-buttons">
          <input type="submit" value="' . t('Send Query') . '" />
          <input type="reset" value="' . t('Reset') . '"/>
        </div>
      </form>
    ';
  }

//  function v($name, $default = false, $o = false) {
//    $ret = parent::v($name, $default, $o);
//    static $translatable = array(
//      'endpoint_heading' => TRUE,
//    );
//
//    if ($ret && isset($translatable[$name])) {
//      $ret = t($ret);
//    }
//
//    return $ret;
//  }

  function go($auto_setup = 0) {
    //$this->sendHeaders();
    $this->handleRequest($auto_setup);
    $result = $this->getResult();

    if ($this->p('query') && !$this->p('show_inline')) {
      $this->setHeader('Content-Description',  'File Transfer');
      $this->setHeader('Content-Disposition', 'attachment; filename=' . 'data.' . $this->p('output'));
      $this->setHeader('Content-Transfer-Encoding', 'binary');
      $this->setHeader('Expires', 0);
      $this->setHeader('Cache-Control',  'must-revalidate');
      $this->setHeader('Pragma', 'public');
      $this->setHeader('Content-Length', strlen($result));
      $this->sendHeaders();
      echo $result;
      exit;
    }
    else {
      return $result;
    }
  }
}