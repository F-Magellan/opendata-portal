<?php
/**
 * @file
 */

define('OD_PUBDLCNT_ROOT', dirname(__FILE__));

/*
 * Constants
 */
define('OD_PUBDLCNT_TABLE', 'od_pubdlcnt');
define('OD_PUBDLCNT_CALLBACK_URL', 'od_pubdlcnt/ajax_update_download_count'); // Ajax callback url

/*
 * Inclusions
 */
require_once OD_PUBDLCNT_ROOT. '/od_pubdlcnt.entity.inc';

//function od_pubdlcnt_stream_wrappers_mod_get_external_url_alter(&$sandbox, StreamWrappersModInterface $wrapper) {
//  static $mime_prohibited = array(
//    'image/*',
//  );
//
//  // Glue it only once
//  if (is_array($mime_prohibited)) {
//    $mime_prohibited = implode("\n", $mime_prohibited);
//  }
//
//  // Do not apply to images
//  $mime = $wrapper->getMimeType($wrapper->getUri());
//  if (drupal_match_path($mime, $mime_prohibited)) {
//    return;
//  }
//
//  static $alter = TRUE;
//  if (!$alter || !($fid = od_pubdlcnt_fid_by_uri($wrapper->getUri()))) {
//    return;
//  }
//
//  // Prohibit altering with this function in order to properly use next function.
//  // And to provide a recursion protection
//  $alter = FALSE;
//  $original_url = $wrapper->getExternalUrl(); // Get original external url
//  /*if (($parsed = parse_url($original_url)) && isset($parsed['scheme']) && isset($parsed['host']) && isset($parsed['path'])) {
//    $original_url = $parsed['path'];
//  }*/
//
//  $env_path = drupal_get_path('module', 'od_pubdlcnt');
//
//  $sandbox['result'] = $GLOBALS['base_url'] . '/' . url("{$env_path}/download.php", array(
//    'external' => TRUE,
//    'query' => array(
//      'fid' => $fid,
//      'goto' => $original_url,
//    ),
//  ));
//
////  $links = &stream_wrappers_mod_context('od_pundlcnt__links');
////  $link_hash = od_pubdlcnt_hash('link', $sandbox['result']);
////  $links[$link_hash] = $sandbox;
//
//  //Permit altering for further operations
//  $alter = TRUE;
//}
//
//function od_pubdlcnt_preprocess_link(&$vars) {
//  $links = &stream_wrappers_mod_context('od_pundlcnt__links');
//  $link_hash = od_pubdlcnt_hash('link', $vars['path']);
//
//  if (isset($links[$link_hash]) && empty($links[$link_hash]['processed'])) {
//    $links[$link_hash]['processed'] = TRUE;
//
//    // Neatly change our custom link themer as a main theme hook.
//    //array_unshift($vars['theme_hook_suggestions'], 'od_pudlcnt_link_theme');
//  }
//
//  $a = 1;
//}

//
//function od_pubdlcnt_theme() {
//  $templates = array();
//
//  $templates['od_pudlcnt_link_theme'] = array(
//    'variables' => array(
//      'item' => NULL,
//    ),
//  );
//
//  return $templates;
//}
//
//function theme_od_pudlcnt_link_theme($variables) {
//  return '<a href="' . url($variables['path'], $variables['options']) . '"' . drupal_attributes($variables['options']['attributes']) . '>' . ($variables['options']['html'] ? $variables['text'] : check_plain($variables['text'])) . '</a>';
//}
//

//function od_pubdlcnt_hash($type, $data) {
//  return substr(md5($data), 0, 8);
//}
//
//function od_pubdlcnt_file_load_by_uri($uri) {
//  $files = file_load_multiple(FALSE, array('uri' => $uri));
//  return reset($files);
//}

///**
// * @param $uri
// * @return mixed
// * @todo: Static cache
// */
//function od_pubdlcnt_fid_by_uri($uri) {
//  return db_query('SELECT fid FROM {file_managed} WHERE uri=:uri', array('uri' => $uri))->fetchField();
//}

/**
 * Gets count of file downloads.
 * @param $fid_or_file
 * @return integer
 */
function od_pubdlcnt_download_count($id) {
  $id = is_numeric($id) ? $id : $id->fid;
  $count = db_query('SELECT `count` FROM {od_pubdlcnt} WHERE id=:id', array(':id' => $id))->fetchField();

  return $count ? $count : 0;
}

function od_pubdlcnt_menu() {
  $items = array();

  $items[OD_PUBDLCNT_CALLBACK_URL] = array(
    'title' => '',
    'page callback' => 'od_pubdlcnt_download_count_update_page_callback_ajax',
    'access callback' => TRUE,
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}

function od_pubdlcnt_load_stat_object($conditions = array(), $one_item = TRUE) {
  static $check_conditions = array(
    'entity_id' => TRUE,
    'entity_type' => TRUE,
    'context' => TRUE,
    'revision_id' => TRUE,
  );

  if (!($object = entity_load('od_pubdlcnt', FALSE, $conditions))) {
    $object = (object) entity_create('od_pubdlcnt', $conditions);
    if (!entity_save('od_pubdlcnt', $object)) {
      $object = FALSE;
    }
    else {
      $object = array($object);
    }
  }

  return $object
    ? ($one_item ? reset($object) : $object)
    : FALSE;
}

function od_pubdlcnt_update_count($id) {
  $result = db_query('
    UPDATE
      {od_pubdlcnt}
    SET
      `count`=`count`+1,
      utime=:utime
    WHERE
      id=:id
  ', array(
    ':id' => $id,
    ':utime' => time(),
  ));

  $a = 1;
}

function od_pubdlcnt_download_count_update_page_callback_ajax() {
  $commands = array();
  if (isset($_POST['stat_id'])) {
    $stat_id = $_POST['stat_id'];
    $status = od_pubdlcnt_update_count($stat_id);
    $commands[] = array(
      'command' => 'odPubdlcntAttacherJS',
      'data' => array(
        'stat_id' => $_POST['stat_id'],
        'status' => $status,
        'count' => od_pubdlcnt_download_count($stat_id),
      ),
    );
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

function od_pubdlcnt_preprocess_html(&$vars) {
  $contexts = drupal_static('od_pubdlcnt_api_attacher_context_add', array());
  $env = drupal_get_path('module', 'od_pubdlcnt');
  if (!empty($contexts)) {
    drupal_add_js(array(
      'od_pubdlcnt' => array(
        'attacherjs' => array(
          'contexts' => $contexts,
          'callback_url' => OD_PUBDLCNT_CALLBACK_URL,
        ),
      ),
    ), 'setting');

    //drupal_add_js($env. '/js/attacher.js', array('type' => 'file', 'group' => JS_THEME));
  }

  drupal_add_js($env. '/js/attacher.js', array('type' => 'file', 'group' => JS_THEME));
}

function od_pubdlcnt_api_attacher_context_add($entity_type, $entity_id, $revision_id = NULL, $context = NULL, $options = array()) {
  $contexts = &drupal_static(__FUNCTION__, array());
  $conditions = array(
    'entity_type' => $entity_type,
    'entity_id' => $entity_id,
    'revision_id' => $revision_id,
    'context' => $context,
  );

  if ($stat_object = od_pubdlcnt_load_stat_object($conditions)) {
    $context = $options + array(
      'stat_id' => $stat_object->id,
    );

    $contexts[] = $context;
    return $context;
  }

  return FALSE;
}

function od_pubdlcnt_field_extra_fields() {
  //@fixme: for all types
  $extra['node']['dataset'] = array(
    'display' => array(      
      'od_publdlcnt_count' => array(
        'label' => t('Download count'),
        'description' => t('Show download count.'),
        'weight' => 0,
      ),      
    ),
  );

  return $extra;
}

/**
 * @param $entity_type
 * @param $entity_id
 * @param null $revision_id
 * @param null $context_condition
 * @return mixed
 * @todo: Static cache
 */
function od_pubdlcnt_entity_download_count($entity_type, $entity_id, $revision_id = NULL, $context_condition = NULL) {
  $query = db_select('od_pubdlcnt', 'd');
  $query
    ->addExpression('SUM(d.count)', 'cnt');
  $query
    ->condition('d.entity_type', $entity_type)
    ->condition('d.entity_id', $entity_id);

  if ($revision_id !== NULL) {
    $query
      ->condition('d.revision_id', $revision_id);
  }

  if ($context_condition !== NULL) {
    $query
      ->condition('d.context', $context_condition, ' LIKE ');
  }

  return $query->execute()->fetchField();
}

/**
 * Implement hook_node_view().
 */        
function od_pubdlcnt_node_view($node, $view_mode) {
  //@fixme: Give user ability to configure context string and if vid should be passed or not
  $count = od_pubdlcnt_entity_download_count('node', $node->nid, NULL, "{$node->type}:%");
  $node->content['od_publdlcnt_count'] = array(
     '#prefix' => '<div class="od-common-pubdlcnt-count-wrapper">',
     '#suffix' => '</div>',
     'file' => array(
     '#markup' => "<span class=\"value\">{$count}</span>"
     ),
  );

  return $node;
}            