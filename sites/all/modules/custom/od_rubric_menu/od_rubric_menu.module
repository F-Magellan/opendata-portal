<?php
/**
 * @return array
 */

// Taxonomy vocabulary machine name containing rubrics.
define('OD_RUBRIC_MENU_RUBRICS_VOCABULARY', 'rubrics');

/**
 * Implements hook_block_info();
 */
function od_rubric_menu_block_info() {
  return array(
    'block_rubric_menu' => array(
      'info' => t('Rubric menu'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Renders submenus for all rubrics
 */
function _od_rubrics_menu_render_rubric_term_submenu() {
  $render_info = array(
    'news' => array(),
    'data' => array(),
    'competitions' => array(),
    //'applications' => array(),
    'blogs' => array(),
    'maps' => array(),
  );

  $defaults = array(
    'item_visibility_callback' => '_od_rubric_menu_item_visibility_callback',
  );

  $build_menu = array(
    '#prefix' => '<ul>',
    '#suffix' => '</ul>',
  );

  $tree = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load(OD_RUBRIC_MENU_RUBRICS_VOCABULARY)->vid); //rubrics
  foreach ($tree as $term) {
    $tw = entity_metadata_wrapper('taxonomy_term', $term->tid);
    if ($tw->field_show_front_page->value() == 1) { //если рубрика показывается на главной странице
      $output = _od_rubric_menu_render_rubric_image($tw);
      $output .= l(i18n_taxonomy_term_name($term), "taxonomy/term/{$term->tid}");
      $list_class = arg(2) == $term->tid? 'expanded' : 'collapsed';
      $build_menu[$term->tid] = array(
        '#prefix' =>  "<li class='$list_class'>",
        '#suffix' => '</li>',
        '#weight' => arg(2) == $term->tid ? -500 : NULL,
      );
      $build_menu[$term->tid]['menu'] = array(
        '#markup' => $output,
      );
      $build_menu[$term->tid]['children'] = array(
        '#prefix' => '<ul>',
        '#suffix' => '</ul>',
      );
      foreach ($render_info as $submenu_key => $info) {
        // Merge defaults
        $info += $defaults;

        // Check item's visibility via callback
        $is_visible = call_user_func($info['item_visibility_callback'], array(
                        'term' => $term,
                        'submenu_key' => $submenu_key,
                        'info' => $info
                      ));

        if ($is_visible) {
          switch ($submenu_key) {
            case 'news':
              $build_menu[$term->tid]['children'][$submenu_key]['#markup'] = '<li>'. l(t('News'), "taxonomy/term/{$term->tid}/news") . '</li>';
              break;
            case 'data':
              $build_menu[$term->tid]['children'][$submenu_key]['#markup'] = '<li>'. l(t('Data'), 'taxonomy/term/'. $term->tid . '/datasets') . '</li>';
              break;
            case 'competitions':
              $build_menu[$term->tid]['children'][$submenu_key]['#markup'] = '<li>'. l(t('Contests'), 'taxonomy/term/'. $term->tid . '/competition') . '</li>';
              break;
            case 'applications':
              $build_menu[$term->tid]['children'][$submenu_key]['#markup'] = '<li>'. '<a href="' . url('apps') . '?f[0]=field_rubric%3A' . $term->tid  . '" rel="nofollow">' . t('Applications') . '</a>'. '</li>';
              break;
            case 'blogs':
              $build_menu[$term->tid]['children'][$submenu_key]['#markup'] = '<li>'. l(t('Blogs'), 'taxonomy/term/' . $term->tid . '/blogs') . '</li>';
              break;
            case 'maps':
              $build_menu[$term->tid]['children'][$submenu_key]['#markup'] = '<li>'. l(t('Map'), "taxonomy/term/{$term->tid}/map") . '</li>';
              break;
          }
        }
      }
    }
  }

  return $build_menu;
}

/**
 * @param $term EntityDrupalWrapper|stdClass|integer
 * @return bool|string
 * @todo: Move to od_common_core
 */
function _od_rubric_menu_render_rubric_image($term) {
  $output = FALSE;
  try {
    if (($term_wrapper = entity_metadata_wrapper('taxonomy_term', $term)) && $term_wrapper->value()) {
      //Check if we have image for this term
      if ($image = $term_wrapper->field_rubric_image->value()) {
        $output .= '<div class="menu-icon"><img src="' .  image_style_url('thumbnail', $image['uri']) .  '"></div>';
      }
    }
  }
  catch (EntityMetadataWrapperException $e) {
    // Just log the exception
    watchdog_exception('od_rubric_menu', $e);
    $output = FALSE;
  }

  return $output;
}


function _od_rubric_menu_item_visibility_callback($options) {
  $is_visible = FALSE;
  switch ($options['submenu_key']) {
    case 'data':
      $query_datasets = new EntityFieldQuery;
  //  $result_datasets = $query_datasets->entityCondition('entity_type', 'node')
  //    ->entityCondition('bundle', 'dataset')
  //    ->propertyCondition('status', 1)
  //    ->fieldCondition('field_rubric', 'tid', $term->tid, '=')
  //    ->execute();
  //  if (count($result_datasets))
      break;
    case 'applications':
      $query = new EntityFieldQuery;
  //  $result = $query->entityCondition('entity_type', 'node')
  //    ->entityCondition('bundle', 'app')
  //    ->propertyCondition('status', 1)
  //    ->fieldCondition('field_rubric', 'tid', $term->tid, '=')
  //    ->execute();
  //  if (count($result))
      break;
    case 'blogs':
      $query = new EntityFieldQuery;
  //  $result = $query->entityCondition('entity_type', 'node')
  //    ->entityCondition('bundle', 'blog')
  //    ->propertyCondition('status', 1)
  //    ->fieldCondition('field_rubric', 'tid', $term->tid, '=')
  //    ->execute(); //@fixme: Might be better to execute view here? or it's fine? View can be cached.
  //  if (count($result))
      break;
    default:
      $is_visible = TRUE;
  }

  return $is_visible;
}

function render_rubric_maps_exists($term) {
  if (render_rubric_data_exists($term)) return TRUE;
}

function od_rubric_menu_block_view($delta = '') {
  /*
   * @todo: Сделать небольшой рефакторинг кода
   * @fixme: Использовать темплейт крайне желательно
   * @fixme: Рендер этого блока можно сделать отдельной функцией, чтобы легко было переносить функционал в custom pane
   * @fixme: Ссылки забиты насильно руками. Было бы лучше достать их в каком-нибудь меню
   */
  $block = array();
  if ($delta != 'block_rubric_menu') {
    return;
  }

  $html = _od_rubrics_menu_render_rubric_term_submenu();
  $block['content'] = render($html);
  return $block;
}
