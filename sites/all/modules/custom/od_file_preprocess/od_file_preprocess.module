<?php

define('CSV_DELIMETER', ',');
define('CSV_ENCLOSURE', chr(34)); // "
define('CRLF', chr(0x0d) . chr(0x0a));
define('DT_VOCAB', 'xsd');


/**
 *  Define file structure table headers
 */
function od_file_preprocess_structure_headers() {
  return array(
    '№',
    'Наименование поля',
    'Описание',
    'Формат значения поля',
  );
}

function od_file_preprocess_table_mimes() {
  return array(
    'application/vnd.ms-excel',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'application/vnd.oasis.opendocument.spreadsheet',
    'text/csv',
  );
}

function od_file_preprocess_graph_mimes() {
  return array(
    'application/xml',
  );
}


/**
 *  Define supported field types
 */
function od_file_preprocess_supporting_fieldtypes() {
  return array(
    'file',
    'recline_field',
  );
}


/**
 * Implements hook_form_alter()
 */
function od_file_preprocess_form_alter(&$form, &$form_state, $form_id) {

  // add preprocess checkbox into file field settings form
  if ($form_id == 'field_ui_field_edit_form' && in_array($form['#field']['type'], od_file_preprocess_supporting_fieldtypes())) {
    $form['instance']['settings']['od_file_preprocess'] = array(
      '#type' => 'checkbox',
      '#title' => t('Preprocess file with the open data'),
      '#default_value' => (isset($form['#instance']['settings']['od_file_preprocess'])) ? $form['#instance']['settings']['od_file_preprocess'] : FALSE,
      '#weight' => 20,
    );
  }
}


/**
 * Implements hook_field_widget_form_alter()
 */
function od_file_preprocess_field_widget_form_alter(&$element, &$form_state, $context) {
  // add preprocess and validate callbacks for widget 
  if (in_array($context['field']['type'], od_file_preprocess_supporting_fieldtypes()) && 
      isset($context['instance']['settings']['od_file_preprocess']) &&
      ($context['instance']['settings']['od_file_preprocess'])) {

    $js = drupal_get_path('module', 'od_file_preprocess') . '/' . 'od_file_preprocess.js';
    foreach ($element as &$el) {
      $el['#process'][] = 'od_file_preprocess_file_element_set_identity';
      $el['#process'][] = 'od_file_preprocess_widget_process';
      //$el['#element_validate'][] = 'od_file_preprocess_widget_validate';
      $el['#attached']['js'][] = $js;
      //$el['#after_build'][] = 'od_file_preprocess_file_element_after_build';

      //$el = od_file_preprocess_file_element_set_identity($el, $form_state);
      //$el = od_file_preprocess_widget_process($el, $form_state);
    }
  }
}

function od_file_preprocess_file_element_set_identity($element, &$form_state) {
  $element['upload_button']['#identity'] = 'upload_button';
  $element['remove_button']['#identity'] = 'remove_button';

  return $element;
}

/**
 * Process form file element
 */
function od_file_preprocess_widget_process($element, &$form_state) {
  $field_name = $element['#field_name'];
  $lang = $element['#language'];
  $delta = $element['#delta'];

  $file_loaded = (isset($form_state['values'][$field_name][$lang][$delta]['fid']) &&
                  ($form_state['values'][$field_name][$lang][$delta]['fid']));

  $generate_structure = TRUE; //@todo: Replace with checking if checkbox is set or something.
  if (!$file_loaded) {
    return $element;
  }

  $identity = isset($form_state['triggering_element']['#identity']) ? $form_state['triggering_element']['#identity'] : 'unknown';
  if ($identity == 'remove_button' || !$generate_structure) {
    //$element['file_data'] = null;
    $form_state['values'][$field_name][$lang][$delta]['file_data'] = null;
    $form_state['input'][$field_name][$lang][$delta]['file_data'] = null;
    $form_state['storage']['structure'] = null;
  }
  elseif ($generate_structure) {
    $file = $element['#file'];
    $structure = od_file_preprocess_get_structure($file, TRUE);

    if (is_array($structure)) {
      $element['file_data']['#parents'] = array(
        $field_name,
        $lang,
        $delta,
        'file_data',
      );
      form_set_value($element['file_data'], $structure, $form_state);
    }

    if (isset($form_state['values'][$field_name][$lang][$delta]['file_data'])) {
      $wrapper = 'edit-' . str_replace('_', '-', $field_name);
      $element['file_data'] = od_file_preprocess_set_element($form_state['values'][$field_name][$lang][$delta]['file_data'], $wrapper);
      $element['file_data']['#attributes'] = array(
        'class' => array('od-preprocess-filedata'),
      );
      $element['file_data']['#type'] = 'container';
//      $element['file_data']['#states'] = array(
//        'visible' => array(
//          '.field-name-field-dataset-convert input[value="1"]' => array(
//            'checked' => FALSE,
//          ),
//        ),
//      );
    }
  }

  return $element;
}


/**
 * Validate form file element
 * @fixme: Doesn't work at all
 */
function od_file_preprocess_widget_validate($element, &$form_state, $form) {
  return;
  if (!isset($form_state['input']['op']) || 
      $form_state['input']['op'] != 'Submit Form') {  
    return;
  }

  $field_name = $element['#field_name'];
  $lang = $element['#language'];
  $delta = $element['#delta'];

  $file_loaded = (isset($form_state['values'][$field_name][$lang][$delta]['fid']) &&
                  ($form_state['values'][$field_name][$lang][$delta]['fid']));
                  
  if (!$file_loaded) {
    if ($element['#required']) {
      form_error($element, t('The field %field is required. ', array('%field' => $element['#title'])));
    }
    return;
  }
  
  $col_data = isset($form_state['values'][$field_name][$lang][$delta]['file_data']['col_data']) ? 
                $form_state['values'][$field_name][$lang][$delta]['file_data']['col_data'] : NULL;

  if (!$col_data) {
    form_error($element, t('Can not parse file structure'));
  }
  else {
    foreach ($col_data as $row_id => $row) {
      if (!$row['col_name']['value']) {
        form_error($element['file_data']['col_data'][$row_id]['col_name'], 
                   t('Column %col name is empty', array('%col' => $row_id + 1)));
      }
      if ($row['datatype'] == 'undefined') {
        $col_name = ($row['col_name']['value']) ? 
                      '"' . $row['col_name']['value'] . '"' : 
                      t('#%col', array('%col' => $row_id + 1));
                      
        form_error($element['file_data']['col_data'][$row_id]['datatype'], 
                   t('Undefined data type for column %col', array('%col' => $col_name)));
      }
    }
  }
}


/**
 *  Parse file structure into $form_state-liked array
 * @todo Cache php_excel loaded things to prevent parsing it again
 */
function od_file_preprocess_get_structure($file, $process_2nd_row = FALSE) {
  $cache = _od_file_preprocess_caches(__FUNCTION__);
  $cache_key = substr(md5($file->uri . $process_2nd_row), 0, 8);
  if (!isset($cache[$cache_key])) {
    // Lets think pessimistically and say that we won't get structure.
    $cache[$cache_key] = NULL;

    od_file_process_prepare_playground();
    if (!is_object($file)) return NULL;
    $path = drupal_realpath($file->uri);

    switch ($file->filemime) {
      case 'application/vnd.ms-excel':                                          // .xls
      case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': // .xlsx
      case 'application/vnd.oasis.opendocument.spreadsheet':                    // .ods
      case 'text/csv':
      case 'application/zip':

          $structure = array(
            //'process_2nd_row' => $process_2nd_row,
          );

          if ($file->filemime == 'text/csv') {
            $data = od_file_preprocess_parse_csv($path);
          }
          elseif ($file->filemime == 'application/zip') {
            $data = od_file_preprocess_parse_zip($path);
          }
          else {
            module_load_include('inc', 'phpexcel');
            $data = od_file_preprocess_excel_import($path, FALSE);
            //$data = phpexcel_import($path, FALSE);
          }

          if (empty($data)) return NULL;

          $data = $data[0]; //first worksheet
          $headers = array_shift($data);

          $col_types = array_fill(0, count($headers), 'undefined');
          $col_desc = ($process_2nd_row) ? NULL : array_shift($data);

          $data_type_weight = array(
            'undefined' => 0,
            'integer' => 10,
            'float' => 20,
            'double' => 30,
            'anyURI' => 40,
            'string' => 50,
          );

          foreach ($headers as $col => $header) {
            foreach ($data as $row) {
              $cell = $row[$col];

              if ($col_types[$col] == 'undefined') {
                $col_types[$col] = od_file_preprocess_get_data_type($cell);
              }
              else {
                $cell_type = od_file_preprocess_get_data_type($cell);
                if ($data_type_weight[$cell_type] > $data_type_weight[$col_types[$col]]) {
                  $col_types[$col] = $cell_type;
                }
              }
            }

            $structure['col_data'][$col]['col_name']['value'] = $header;
            $structure['col_data'][$col]['col_desc'] = ($col_desc) ? $col_desc[$col] : '';
            $structure['col_data'][$col]['datatype'] = $col_types[$col];

            $col++;
          }

          $structure['is_table_data'] = TRUE;
          $cache[$cache_key] = $structure;
        break;

    }
  }

  return $cache[$cache_key];
}


/**
 * Create form element from $form_state values
 */
function od_file_preprocess_set_element($values = array(), $wrapper = '') {

  if (!count($values)) return FALSE;
/*
  $element['process_2nd_row'] = array(
    '#type' => 'checkbox',
    '#default_value' => (isset($values['process_2nd_row']) && $values['process_2nd_row']),
    '#title' => t('Second row not contain columns descriptions'),
    '#ajax' => array(
      'callback' => 'od_file_preprocess_ajax_callback',
      'wrapper' => $wrapper,
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
*/
  if (!empty($values['codepage'])) {
    $element['codepage'] = array(
      '#type' => 'select',
      '#title' => t('Code page of loaded document'),
      '#options' => array(
        'CP1251' => 'cp-1251 (Windows)',
        'UTF-8' => 'utf-8 (Unicode)',
      ),
      '#ajax' => array(
        'callback' => 'od_file_preprocess_ajax_callback',
        'wrapper' => $wrapper,
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#default_value' => $values['codepage'],
    );
  }

  if (!empty($values['is_table_data'])) {
    $element['convert_to'] = array(
      '#type' => 'select',
      '#title' => t('Save file as'),
      '#options' => array(
        'csv' => 'csv',
        'xml' => 'xml',
      ),
      '#default_value' => !empty($values['convert_to']) ?  $values['convert_to'] : 'csv',
    );
  }
  
  $element['col_data'] = array(
    '#type' => 'table',
    '#header' => od_file_preprocess_structure_headers(),
  );

  foreach ($values['col_data'] as $col => $value) {
    $element['col_data'][$col] = array(
      'rownum' => array(
        '#type' => 'markup',
        '#markup' => $col + 1,  // row numbering starts from 1
      ),
      'col_name' => array(
        '#type' => 'container', // non-editable element, values stored in $form_state
        'display' => array(
          '#type' => 'markup',
          '#markup' => $value['col_name']['value'],
        ),
        'value' => array(
          '#type' => 'hidden',
          '#value' => $value['col_name']['value'],
        ),
      ),      
      'col_desc' => array(
        '#type' => 'textarea',
        '#size' => 10,
        '#required' => FALSE,
        '#cols' => 40,
        '#rows' => 3,
        '#resizable' => FALSE,
        '#value' => $value['col_desc'],
      ),
      'datatype' => array(
        '#type' => 'select',
        '#options' => array(
          'undefined' => t('Undefined'),
          'boolean' => t('Boolean'),
          'integer' => t('Integer'),
          'double' => t('Double'),
          'dateTime' => t('dateTime'),
          'anyURI' => t('anyURI'),
          'string' => t('String'),
        ),
        '#value' => $value['datatype'],
        '#attributes' => array('class' => array('od-preprocess-datatype-selector')),
        '#required' => FALSE,
      ),
    );
    if (empty($element['col_data'][$col]['col_name']['display']['#markup'])) {
      $element['col_data'][$col]['col_name']['display']['#markup'] = t('Column name can not be empty');
      $element['col_data'][$col]['col_name']['display']['#prefix'] = '<div class ="messages error">';
      $element['col_data'][$col]['col_name']['display']['#suffix'] = '</div>';
    }
  }
  return $element;
}


/**
 *  ajax callback for 'parse_2nd_row' form element 
 */

function od_file_preprocess_ajax_callback($form, $form_state) {
  return $form[$form_state['triggering_element']['#parents'][0]];
}


/**
 * trying to guess data type
 */
function od_file_preprocess_get_data_type($val) {

  if (empty($val) && $val !== 0) return 'undefined';
  
  if (is_numeric($val)) {

    if ((int)$val == $val || $val === 0) {
      return 'integer';
    }
    else {
      return 'double';
    }
  }
  else {
    if (valid_email_address($val) || valid_url($val, TRUE)) {
      return 'anyURI';
    }
    else {
      return 'string';
    }
  }
}

/**
 * @param $path
 * @param bool $codepage
 * @return array
 */
function od_file_preprocess_parse_csv($path, $codepage = FALSE) {
  $cache = _od_file_preprocess_caches(__FUNCTION__);
  $cache_key = substr(md5($path), 0, 8);
  if (!isset($cache[$cache_key])) {
    include_once DRUPAL_ROOT . '/sites/all/libraries/PHPExcel/Classes/PHPExcel.php';
    include_once DRUPAL_ROOT . '/sites/all/libraries/PHPExcel/Classes/PHPExcel/IOFactory.php';

    if (!$codepage && ($codepage = od_detect_encoding_guess_file($path))) {
      // If we couldn't guess encoding automatically, fallback it to UTF8
      $codepage = ODDetectEncoding::ENC_UTF8;
    }

    $codepage = strtoupper($codepage);

    $objReader = new PHPExcel_Reader_CSV();
    $objReader->setReadDataOnly(TRUE);
    //default MS Excell - created csv settings
    $objReader->setInputEncoding($codepage);
    $objReader->setDelimiter(';');

    $objPHPExcel = $objReader->load($path);
    $objWorksheet = $objPHPExcel->getActiveSheet();

    $row_n = 0;
    $data = array();
    foreach ($objWorksheet->getRowIterator() as $row) {
      $col_n = 0;
      $cellIterator = $row->getCellIterator();
      $cellIterator->setIterateOnlyExistingCells(false);
      foreach ($cellIterator as $cell) {
        $data[0][$row_n][$col_n] = $cell->getValue();
        $col_n++;
      }
      $row_n++;
    }

    $cache[$cache_key] = $data;
  }

  return $cache[$cache_key];
}

/**
 * @param null $key
 * @param array $default
 * @return mixed
 * @todo Turn to drupalcache, not static
 */
function &_od_file_preprocess_caches($key = NULL, $default = array()) {
  $cache = drupal_static(__FUNCTION__, array());
  if  ($key != NULL) {
    if (!isset($cache[$key])) {
      $cache[$key] = $default;
    }

    return $cache[$key];
  }

  return $cache;
}

/**
 * @param $path
 * @return array|bool
 * @todo Cache
 */
function od_file_preprocess_parse_zip($path) {
  $cache = _od_file_preprocess_caches(__FUNCTION__);
  $cache_key = substr(md5($path), 0, 8);
  if (!isset($cache[$cache_key])) {
    $zip = new ZipArchive();
    if ($zip->open($path) != TRUE) {
      return FALSE; // An error was ocurred
    }

    $temp_dir = $tmp = 'temporary://'. substr(md5($path . time() . srand(time())), 0, 8);
    $i = 0;
    while (file_exists($tmp) && $i <= 50) {
      $tmp = $temp_dir. $i++;
    }

    $temp_dir = $tmp;
    mkdir($temp_dir);
    $zip->extractTo($temp_dir);
    $zip->close();

    od_common_module('core');
    if (!($files_list = od_common_list_dir($temp_dir))) {
      return FALSE;
    }

    $data = array();
    foreach ($files_list->raw as $fileinfo) {
      switch ($fileinfo['extension']) {
        case 'csv':
          $processed = od_file_preprocess_parse_csv($fileinfo['uri']);
          if (is_array($processed)) {
            $data = array_merge($data, $processed);
          }
          break;
      }
    }

    $cache[$cache_key] = !empty($data) ? $data : FALSE;
    $data = NULL;
    $processed = NULL;
  }

  return $cache[$cache_key];
}

/**
 * Same as phpexcel_import but with short time caching.
 * @param $path
 * @param bool $keyed_by_headers
 * @param bool $keyed_by_worksheet
 * @param null $custom_calls
 * @return array|bool|PHPEXCEL_ERROR_FILE_NOT_READABLE|PHPEXCEL_ERROR_LIBRARY_NOT_FOUND
 * @todo Use _od_file_preprocess_caches()
 */
function od_file_preprocess_excel_import($path, $keyed_by_headers = TRUE, $keyed_by_worksheet = FALSE, $custom_calls = NULL) {
  static $cache_default = array(
    'bin' => 'cache',
    'data' => null,
  );

  $cid = substr(md5(implode('_', func_get_args())), 0, 8);
  static $cache = NULL;
  if (!$cache || FALSE === ($cache = cache_get($cid, $cache_default['bin']))) {
    $cache = (object) $cache_default;
    $cache->cid = $cid;
    $cache->expire = strtotime('+10 minutes');
  }

  $cache->bin = $cache_default['bin'];

  if (!isset($cache->data)) {
    $cache->data = phpexcel_import($path, $keyed_by_headers, $keyed_by_worksheet, $custom_calls);
    $cache->data = $cache->data ? $cache->data : FALSE;

    cache_set($cache->cid, $cache->data, $cache->bin, $cache->expire);
  }

  return $cache->data;
}
