<?php

define('CSV_DELIMETER', ';');
define('CSV_ENCLOSURE', chr(34)); // "
define('CRLF', chr(0x0d) . chr(0x0a));
define('DT_VOCAB', 'xsd');


/**
 *  Define file structure table headers
 */
function od_file_preprocess_structure_headers() {
  return array(
    '№',
    'Наименование поля',
    'Описание',
    'Формат значения поля',
  );
}

function od_file_preprocess_table_mimes() {
  return array(
    'application/vnd.ms-excel',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'application/vnd.oasis.opendocument.spreadsheet',
    'text/csv',
  );
}

function od_file_preprocess_graph_mimes() {
  return array(
    'application/xml',
  );
}


/**
 *  Define supported field types
 */
function od_file_preprocess_supporting_fieldtypes() {
  return array(
    'file',
    'recline_field',
  );
}


/**
 * Implements hook_form_alter()
 */
function od_file_preprocess_form_alter(&$form, &$form_state, $form_id) {

  // add preprocess checkbox into file field settings form
  if ($form_id == 'field_ui_field_edit_form' && in_array($form['#field']['type'], od_file_preprocess_supporting_fieldtypes())) {
    $form['instance']['settings']['od_file_preprocess'] = array(
      '#type' => 'checkbox',
      '#title' => t('Preprocess file with the open data'),
      '#default_value' => (isset($form['#instance']['settings']['od_file_preprocess'])) ? $form['#instance']['settings']['od_file_preprocess'] : FALSE,
      '#weight' => 20,
    );
  }
}


/**
 * Implements hook_field_widget_form_alter()
 */
function od_file_preprocess_field_widget_form_alter(&$element, &$form_state, $context) {

  // add preprocess and validate callbacks for widget 
  if (in_array($context['field']['type'], od_file_preprocess_supporting_fieldtypes()) && 
      isset($context['instance']['settings']['od_file_preprocess']) &&
      ($context['instance']['settings']['od_file_preprocess'])) {

    $js = drupal_get_path('module', 'od_file_preprocess') . '/' . 'od_file_preprocess.js';

    foreach ($element as &$el) {
      if (!isset($el['#process']) ||
          !in_array('od_file_postprocess_callback', $el['#process'])) {
          
        $el['#process'][] = 'od_file_preprocess_widget_process';
      }
        
      if (!isset($el['#element_validate']) || 
          !in_array('od_file_preprocess_widget_validate', $el['#element_validate'])) {
          
        $el['#element_validate'][] = 'od_file_preprocess_widget_validate';
      }
      
      if (!isset($el['#attached']['js']) ||
          !in_array($js, $el['#attached']['js'])) {
          
        $el['#attached']['js'][] = $js;
      }
    } 

  }
}


/**
 * Process form file element
 */
function od_file_preprocess_widget_process($element, &$form_state, $form) {
 
  if ((!isset($form_state['input']['op']) || 
       $form_state['input']['op'] != 'Submit Form') && 
      !$form_state['submitted']) {
    
    return $element;
  }

  $field_name = $element['#field_name'];
  $lang = $element['#language'];
  $delta = $element['#delta'];

  $file_loaded = (isset($form_state['values'][$field_name][$lang][$delta]['fid']) &&
                  ($form_state['values'][$field_name][$lang][$delta]['fid']));

  if (isset($form_state['triggering_element'])) {
    if ($form_state['triggering_element']['#name'] == $field_name . '_' . $lang . '_' . $delta  . '_upload_button') {

      if ($file_loaded) {
        $file = $element['#file'];
/*
        $process_2nd_row = (isset($form_state['values'][$field_name][$lang][$delta]['file_data']['process_2nd_row']) && 
                            $form_state['values'][$field_name][$lang][$delta]['file_data']['process_2nd_row']);

        $structure = od_file_preprocess_get_structure($file, $process_2nd_row);
*/

        $structure = od_file_preprocess_get_structure($file, TRUE);
        if (is_array($structure)) {
          $element['file_data']['#parents'] = array(
            $field_name,
            $lang,
            $delta,
            'file_data',
          );
          form_set_value($element['file_data'], $structure, $form_state);
        }
      }
    }
    if ($form_state['triggering_element']['#name'] == $field_name . '_' . $lang . '_' . $delta  . '_remove_button') {
      unset($element['file_data']);
      unset($form_state['values'][$field_name][$lang][$delta]['file_data']);
    }
  }

  if (isset($form_state['values'][$field_name][$lang][$delta]['file_data'])) {
    $wrapper = 'edit-' . str_replace('_', '-', $field_name);
    $element['file_data'] = od_file_preprocess_set_element($form_state['values'][$field_name][$lang][$delta]['file_data'], $wrapper);
  } /*
  elseif ($file_loaded) {
    $element['file_data'] = array(
      '#type' => 'markup',
      '#markup' => t('Can not parse file structure'),
      '#prefix' => '<div class="messages error">',
      '#suffix' => '</div>',
    );
  } */

  return $element;
}


/**
 * Validate form file element 
 */
function od_file_preprocess_widget_validate($element, &$form_state, $form) {

  if (!isset($form_state['input']['op']) || 
      $form_state['input']['op'] != 'Submit Form') {  
    return;
  }

  $field_name = $element['#field_name'];
  $lang = $element['#language'];
  $delta = $element['#delta'];

  $file_loaded = (isset($form_state['values'][$field_name][$lang][$delta]['fid']) &&
                  ($form_state['values'][$field_name][$lang][$delta]['fid']));
                  
  if (!$file_loaded) {
    if ($element['#required']) {
      form_error($element, t('The field %field is required. ', array('%field' => $element['#title'])));
    }
    return;
  }
  
  $col_data = isset($form_state['values'][$field_name][$lang][$delta]['file_data']['col_data']) ? 
                $form_state['values'][$field_name][$lang][$delta]['file_data']['col_data'] : NULL;

  if (!$col_data) {
    form_error($element, t('Can not parse file structure'));
  }
  else {
    foreach ($col_data as $row_id => $row) {
      if (!$row['col_name']['value']) {
        form_error($element['file_data']['col_data'][$row_id]['col_name'], 
                   t('Column %col name is empty', array('%col' => $row_id + 1)));
      }
      if ($row['datatype'] == 'undefined') {
        $col_name = ($row['col_name']['value']) ? 
                      '"' . $row['col_name']['value'] . '"' : 
                      t('#%col', array('%col' => $row_id + 1));
                      
        form_error($element['file_data']['col_data'][$row_id]['datatype'], 
                   t('Undefined data type for column %col', array('%col' => $col_name)));
      }
    }
  }
}


/**
 *  Parse file structure into $form_state-liked array
 */
function od_file_preprocess_get_structure($file, $process_2nd_row = FALSE) {

  if (!is_object($file)) return NULL;
  $path = drupal_realpath($file->uri);

  switch ($file->filemime) {
    case 'application/vnd.ms-excel':                                          // .xls
    case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': // .xlsx
    case 'application/vnd.oasis.opendocument.spreadsheet':                    // .ods
    case 'text/csv':

        $structure = array(
          //'process_2nd_row' => $process_2nd_row,
        );
      
        if ($file->filemime == 'text/csv') {
          $data = od_file_preprocess_parse_csv($path);
        }
        else {
          module_load_include('inc', 'phpexcel');
          $data = phpexcel_import($path, FALSE);
        }

        if (empty($data)) return NULL;
        
        $data = $data[0]; //first worksheet
        //dsm($data);
        $headers = array_shift($data);

        $col_types = array_fill(0, count($headers), 'undefined');       
        $col_desc = ($process_2nd_row) ? NULL : array_shift($data);
        
        $data_type_weight = array(
          'undefined' => 0,
          'integer' => 10,
          'float' => 20,
          'double' => 30,
          'anyURI' => 40,
          'string' => 50,
        );
        
        foreach ($headers as $col => $header) {
          foreach ($data as $row) {
            $cell = $row[$col];
            
            if ($col_types[$col] == 'undefined') {
              $col_types[$col] = od_file_preprocess_get_data_type($cell);
            }
            else {
              $cell_type = od_file_preprocess_get_data_type($cell);
              if ($data_type_weight[$cell_type] > $data_type_weight[$col_types[$col]]) {
                $col_types[$col] = $cell_type;
              }
            }
          }

          $structure['col_data'][$col]['col_name']['value'] = $header;
          $structure['col_data'][$col]['col_desc'] = ($col_desc) ? $col_desc[$col] : '';
          $structure['col_data'][$col]['datatype'] = $col_types[$col];
          
          $col++;
        }

        $structure['is_table_data'] = TRUE;
        return $structure;
      break;

  }
}


/**
 * Create form element from $form_state values
 */
function od_file_preprocess_set_element($values = array(), $wrapper = '') {

  if (!count($values)) return FALSE;
/*
  $element['process_2nd_row'] = array(
    '#type' => 'checkbox',
    '#default_value' => (isset($values['process_2nd_row']) && $values['process_2nd_row']),
    '#title' => t('Second row not contain columns descriptions'),
    '#ajax' => array(
      'callback' => 'od_file_preprocess_ajax_callback',
      'wrapper' => $wrapper,
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
*/
  if (!empty($values['codepage'])) {
    $element['codepage'] = array(
      '#type' => 'select',
      '#title' => t('Code page of loaded document'),
      '#options' => array(
        'CP1251' => 'cp-1251 (Windows)',
        'UTF-8' => 'utf-8 (Unicode)',
      ),
      '#ajax' => array(
        'callback' => 'od_file_preprocess_ajax_callback',
        'wrapper' => $wrapper,
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#default_value' => $values['codepage'],
    );
  }

  if (!empty($values['is_table_data'])) {
    $element['convert_to'] = array(
      '#type' => 'select',
      '#title' => t('Save file as'),
      '#options' => array(
        'xml' => 'xml',
        'csv' => 'csv',
      ),
      '#default_value' => empty($values['convert_to']) ? 'xml': $values['convert_to'],
    );
  }
  
  $element['col_data'] = array(
    '#type' => 'table',
    '#header' => od_file_preprocess_structure_headers(),
  );

  foreach ($values['col_data'] as $col => $value) {
    $element['col_data'][$col] = array(
      'rownum' => array(
        '#type' => 'markup',
        '#markup' => $col + 1,  // row numbering starts from 1
      ),
      'col_name' => array(
        '#type' => 'container', // non-editable element, values stored in $form_state
        'display' => array(
          '#type' => 'markup',
          '#markup' => $value['col_name']['value'],
        ),
        'value' => array(
          '#type' => 'hidden',
          '#value' => $value['col_name']['value'],
        ),
      ),      
      'col_desc' => array(
        '#type' => 'textarea',
        '#size' => 10,
        '#required' => FALSE,
        '#cols' => 40,
        '#rows' => 3,
        '#resizable' => FALSE,
        '#value' => $value['col_desc'],
      ),
      'datatype' => array(
        '#type' => 'select',
        '#options' => array(
          'undefined' => t('Undefined'),
          'boolean' => t('Boolean'),
          'integer' => t('Integer'),
          'double' => t('Double'),
          'dateTime' => t('dateTime'),
          'anyURI' => t('anyURI'),
          'string' => t('String'),
        ),
        '#value' => $value['datatype'],
        '#attributes' => array('class' => array('od-preprocess-datatype-selector')),
        '#required' => FALSE,
      ),
    );
    if (empty($element['col_data'][$col]['col_name']['display']['#markup'])) {
      $element['col_data'][$col]['col_name']['display']['#markup'] = t('Column name can not be empty');
      $element['col_data'][$col]['col_name']['display']['#prefix'] = '<div class ="messages error">';
      $element['col_data'][$col]['col_name']['display']['#suffix'] = '</div>';
    }
  }
  return $element;
}


/**
 *  ajax callback for 'parse_2nd_row' form element 
 */

function od_file_preprocess_ajax_callback($form, $form_state) {
  return $form[$form_state['triggering_element']['#parents'][0]];
}


/**
 * trying to guess data type
 */
function od_file_preprocess_get_data_type($val) {

  if (empty($val) && $val !== 0) return 'undefined';
  
  if (is_numeric($val)) {

    if ((int)$val == $val || $val === 0) {
      return 'integer';
    }
    else {
      return 'double';
    }
  }
  else {
    if (valid_email_address($val) || valid_url($val, TRUE)) {
      return 'anyURI';
    }
    else {
      return 'string';
    }
  }
}

function od_file_preprocess_parse_csv($path, $codepage = 'CP1251') {
  
  include_once DRUPAL_ROOT . '/sites/all/libraries/PHPExcel/Classes/PHPExcel.php';
  include_once DRUPAL_ROOT . '/sites/all/libraries/PHPExcel/Classes/PHPExcel/IOFactory.php';

  $objReader = new PHPExcel_Reader_CSV();
  $objReader->setReadDataOnly(TRUE);
  //default MS Excell - created csv settings
  $objReader->setInputEncoding($codepage);
  $objReader->setDelimiter(CSV_DELIMETER);
  
  $objPHPExcel = $objReader->load($path);
  $objWorksheet = $objPHPExcel->getActiveSheet();

  $row_n = 0;
  $data = array();
  foreach ($objWorksheet->getRowIterator() as $row) {
    $col_n = 0;
    $cellIterator = $row->getCellIterator();
    $cellIterator->setIterateOnlyExistingCells(false);
    foreach ($cellIterator as $cell) {
      $data[0][$row_n][$col_n] = $cell->getValue();
      $col_n++;
    }
    $row_n++;
  }

  return $data;
}