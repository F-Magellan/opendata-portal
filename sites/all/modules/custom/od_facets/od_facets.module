<?php
/**
 * @file
 *  Ajax facets implementation.
 */

/**
 * Implements hook_facetapi_widgets().
 */
function od_facets_facetapi_widgets() {
  $items = array();

  $items['od_facetapi_ajax_links'] = array(
    'handler' => array(
      'label' => 'Opendata Widget Checkboxes',
      'class' => 'FacetapiOdFacetsAjaxWidgetLinks',
      'query types' => array('term'),
    ),
  );

  $items['od_facetapi_ajax_links_with_search'] = array(
    'handler' => array(
      'label' => 'Opendata Widget Checkboxes (with search)',
      'class' => 'FacetapiOdFacetsAjaxWidgetLinksSearchable',
      'query types' => array('term'),
    ),
  );

  return $items;
}

//function od_facets_facetapi_searcher_info_alter(&$searcher_info) {
//  $a = 1;
//}

///**
// * Implements hook_facetapi_empty_behaviors().
// */
//function od_facets_facetapi_empty_behaviors() {
//  return array(
//    'od_facets_empty_behavior' => array(
//      'handler' => array(
//        'label' => t('Opendata AJAX Empty Facet'),
//        'class' => 'OdFacetsEmptyBehavior',
//      ),
//    ),
//  );
//}

function od_facets_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'facetapi' && $plugin_type == 'empty_behaviors') {
    return 'includes/facetapi/empty_behaviors';
  }
}

/**
 * Implements hook_menu().
 */
function od_facets_menu_alter(&$items) {
  if ($items['ajax/ajax_facets/refresh']) {
    $items['ajax/ajax_facets/refresh']['page callback'] = 'od_facets_ajax_facets_refresh_facets_content';
  }
}

/**
 * Callback to update facets content by AJAX.
 */
function od_facets_ajax_facets_refresh_facets_content() {
  $name = $_GET['view_name'];
  $display_id = $_GET['display_name'];
  // Execute view query to fill facets.
  $view = views_get_view($name);
  $view->execute_display($display_id, $_GET);
  $page = $view->preview($display_id);

  $searcher = 'search_api@' . $_GET['index_id'];
  $adapter = facetapi_adapter_load($searcher);
  $blocks = od_facets_ajax_facets_process_facet_blocks($searcher);
  $facet_query = !empty($_GET['f']) ? $_GET['f'] : '';

  $facet_tags = $adapter->getFacet(array('name' => 'field_tags'));

  $result = array(
    'applyUrl' => ajax_facets_facet_build_apply_path($adapter),
    'resetUrls' => $blocks['reset_urls'],
    'newContent' => $blocks['facet_blocks'],
    'hideBlocks' => $blocks['hide_blocks'],
    'activeItems' => $blocks['active_items'],
    'views_content' => $page,
    'display_id' => $display_id,
    'views_name' => $name,
    'facets' => $facet_query,
    'update_results' => $blocks['update_results'],
    'total_results' => $view->total_rows,
    'settings' => array(),
  );

  // @see template_preprocess_views_view();
  // Update settings when view will be reloaded. Specifically $view->dom_id.
  if ($view->use_ajax) {
    $result['settings'] = array(
      'views' => array(
        'ajax_path' => url('views/ajax', array('query' => array('f' => $facet_query))),
        'ajaxViews' => array(
          'views_dom_id:' . $view->dom_id => array(
            'view_name' => $view->name,
            'view_display_id' => $view->current_display,
            'view_args' => check_plain(implode('/', $view->args)),
            'view_path' => check_plain($_GET['q']),
            // Pass through URL to ensure we get e.g. language prefixes.
            'view_base_path' => $view->get_path(),
            'view_dom_id' => $view->dom_id,
            // To fit multiple views on a page, the programmer may have
            // overridden the display's pager_element.
            'pager_element' => isset($view->query->pager) ? $view->query->pager->get_pager_id() : 0,
          ),
        ),
      ),
    );
  }

  return $result;
}

/**
* Generates an array of facet block data for a given searcher and realm
*
 * @param  string $searcher
*         The machine name of the searcher.
 *
 * @param  string $realm_name
*         The machine name of the realm
*
 * @return array
 *         An array of facet block data
*/
function od_facets_ajax_facets_process_facet_blocks($searcher, $realm_name = 'block') {
  $blocks = ajax_facets_process_facet_blocks($searcher, $realm_name);

  foreach ($blocks as $block) {
//    if (isset($builds[$group][$facet_name]['#identity_class'])) {
//      $identity = $builds[$group][$facet_name]['#identity_class'];
//    }
//
//    // Skip currently checked facet - we will not refresh them.
//    $blocks['facet_blocks'][$identity] = drupal_render($builds[$group][$facet_name]);
  }
}

/**
 * Implementation of hook_views_ajax_data_alter()
 */
function od_facets_views_ajax_data_alter(&$commands, $view) {
  ajax_facets_views_ajax_data_alter($commands, $view);
//  // As long as we're on a search api index view
//  if (strpos($view->base_table, 'search_api_index') !== FALSE) {
//    // We can get the index ID from the view base table
//    $index_id = str_replace('search_api_index_', '', $view->base_table);
//    // Create the searcher name
//    $searcher = 'search_api@' . $index_id;
//    // Get our facet blocks
//    $blocks = ajax_facets_process_facet_blocks($searcher);
//    // Create commands to replace each block
//    foreach ($blocks['facet_blocks'] as $class => $content) {
//      $commands[] = ajax_command_replace('.' . $class, $content);
//    }
//    // Show all blocks
//    $commands[] = ajax_command_invoke('div.block-facetapi:not(:visible)', 'show');
//    // Hide empty blocks
//    foreach ($blocks['hide_blocks'] as $block_id) {
//      $commands[] = ajax_command_invoke('#' . $block_id, 'hide');
//    }
//    // Update the views ajax path with the facet query so that exposed filter
//    // page requests knows which facets are enabled
//    $facet_query = !empty($_GET['f']) ? $_GET['f'] : '';
//    if ($facet_query) {
//      $settings = array(
//        'views' => array(
//          'ajax_path' => url('views/ajax', array('query' => array('f' => $facet_query))),
//        ),
//      );
//      // We need to put this at the head of the commands so that it runs before
//      // the views commands. This is because ajax_render() in ajax.inc prepends
//      // it's own settings command to the commands array which will change
//      // views ajax_path back to views/ajax. If we don't fix this before views
//      // runs it's ajax commands, the views ajax event won't get the facets in
//      // the path and they'll be reset on exposed filter input.
//      array_unshift($commands, ajax_command_settings($settings, TRUE));
//    }
//  }
}

/**
 * Implements hook_module_implements_alter()
 */
function od_facets_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'views_ajax_data_alter' && isset($implementations['ajax_facets'])) {
    //unset($implementations['ajax_facets']);
  }
}

