<?php

define('MAX_FILESIZE', pow(1024,2)); //1M max
define('CSV_DELIMETER', ';');
define('CSV_ENCLOSURE', chr(34)); // "

/**
 * @param $file_url = full path to file
 * @param $file_type = file extension
 * @return html file content
 */
function custom_render_opendata($file_url = '', $file_type = '') {

  if (!$file_url) return FALSE;

  $file_content = '';  
  $file_info = array(
    'url' => $file_url,
    'extension' => $file_type,
  );
  $file_info = _file_get_info($file_info);
  
  if (!isset($file_info['error'])) {
    $file_info = _file_info_validate($file_info);
    if (!isset($file_info['error'])) {
      switch ($file_info['extension']) {
        case 'csv': 
            $file_content = _render_file_csv($file_info);
          break;
          
        case 'xml':
            $file_content = _render_file_xml($file_info);
          break;
      }
    }
  }
  if (isset($file_info['error'])) {
    $file_content = '<div class="file-error">';
    $file_content = t('File can not be displayed becouse @error', array('@error' => $file_info['error']));
    $file_content .= '</div>';
  }
  return $file_content;
}


/**
 * Parse file url and retrive additional info from http request headers
 */ 
function _file_get_info($file_info = array()) {

  if (!isset($file_info['url']) || !$file_info['url']) 
    return $file_info + array('error' => t('file url is empty'));

  $file_info += pathinfo($file_info['url']);
  $file_info += parse_url($file_info['dirname']);
  
  if (!isset($file_info['port'])) {
    switch ($file_info['scheme']) {
      case 'https': $file_info['port'] = '443'; break;
      default: $file_info['port'] = '80';
    }
  }

  if (isset($file_info['extension']) && $file_info['extension']) {
    $file_info['extension'] = strtolower($file_info['extension']);
  }
  else {
    return $file_info + array('error' => t('file type is invalid'));
  }

  $remote_file = @fopen($file_info['url'], 'r');
  if (!$remote_file) 
    return $file_info + array('error' => t('can\'t open file'));
  
  $file_meta = stream_get_meta_data($remote_file);
  fclose($remote_file);

  if (!isset($file_meta['wrapper_data']) || !$file_meta['wrapper_data']) 
    return array('error' => t('can\'t retrive file metadata'));
  
  $meta_needle = array(
    'content-type' => 'Content-Type', 
    'size' => 'content-length', 
    'etag' => 'ETag',
  );
  
  foreach ($file_meta['wrapper_data'] as $data) {
    foreach ($meta_needle as $key => $needle) {
      if (stristr($data, $needle)) {
        $meta = explode(':', $data);
        $file_info[$key] = trim($meta[1], ' "');
      }
    }
  }
  
  if (isset($file_info['content-type']) && 
      stristr($file_info['content-type'], '; charset=')) {
      
    $meta = explode('; charset=', $file_info['content-type']);
    $file_info['content-type'] = $meta[0];
    $file_info['charset'] = $meta[1];
  }
  return $file_info;
}

/**
 * Validate file metadata
 */
function _file_info_validate($file_info = array()) {
  $valid_filesize = pow(1024,2); //1M max
  $valid_types = array(
    'csv' => array(
      'text/plain',
      'text/csv',
    ),
    'xml' => array(
      'text/xml',
    ),
  );

  if (!$file_info) return array('error' => t('file info is empty'));
/*
  if (!isset($file_info['size']) || $file_info['size'] > MAX_FILESIZE)
    return $file_info + array('error' => t('file size is invalid'));
    */
  if (!isset($file_info['extension']) || 
      !isset($file_info['content-type']) ||
      !isset($valid_types[$file_info['extension']]) ||
      !in_array($file_info['content-type'], $valid_types[$file_info['extension']]))
    return $file_info + array('error' => t('file type is invalid'));

  //file info is valid:
  if (isset($file_info['error'])) unset($file_info['error']);
  return $file_info;
}


/**
 * @return html table from CSV file
 */
function _render_file_csv($file_info = array()) {

  if (!$file_info) return FALSE;
  
  $rows = file($file_info['url']);
  $utf = preg_match('#.#u', $rows[0]);
  $filearray = array();

  foreach ($rows as $delta => $row) {
    if (!$utf) 
      $row = iconv('WINDOWS-1251', 'UTF-8', $row);
      
    $filearray[$delta] = str_getcsv($row, CSV_DELIMETER, CSV_ENCLOSURE);
  }
  
  $header = array_shift($filearray);
  
  $table = array(
    'header' => $header,
    'rows' => $filearray,
    'attributes' => array(), 
    'sticky' => NULL, 
    'caption' => NULL, 
    'colgroups' => NULL, 
    'empty' => NULL,
  );
  
  return theme_table($table);
}


/**
 * @return html list from XML file
 */
function _render_file_xml($file_info = array()) {
/*
  if (!$file_info) return FALSE;

  require_once 'xml2array.php.inc';
  
  $raw_xml = file_get_contents($file_info['url']);
  $xmlObj = new XmlToArray($raw_xml);
  $arrayData = $xmlObj->createArray();
  dsm($arrayData);
  return '<ul class="xml-parsed">' . $xmlObj->array2html($arrayData) . '</ul>';
*/
  $init_js = 'jQuery(document).ready(function() {})';
  $path_to_module = drupal_get_path('module', 'custom_render_opendata');
  drupal_add_css($path_to_module . '/XMLDisplay.css');
  $html = '<div id="XMLHolder"> </div>';
  $html .= '<script type="text/javascript" src="/' . $path_to_module . '/XMLDisplay.js"></script>';
  $html .= '<script>LoadXML("XMLHolder", "' . $file_info['url'] . '");</script>';
  return $html;
}
